// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	goparser "go/parser"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/mmcloughlin/ssarules/ast"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 13, col: 1, offset: 68},
			expr: &actionExpr{
				pos: position{line: 13, col: 9, offset: 76},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 13, col: 9, offset: 76},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 13, col: 9, offset: 76},
							label: "rs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 13, col: 12, offset: 79},
								expr: &seqExpr{
									pos: position{line: 13, col: 14, offset: 81},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 167, col: 6, offset: 3082},
											expr: &choiceExpr{
												pos: position{line: 169, col: 10, offset: 3098},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 173, col: 12, offset: 3151},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 173, col: 12, offset: 3151},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 173, col: 17, offset: 3156},
																expr: &charClassMatcher{
																	pos:        position{line: 173, col: 17, offset: 3156},
																	val:        "[^\\n]",
																	chars:      []rune{'\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 178, col: 8, offset: 3219},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 177, col: 15, offset: 3204},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 13, col: 16, offset: 83},
											name: "Rule",
										},
										&zeroOrMoreExpr{
											pos: position{line: 167, col: 6, offset: 3082},
											expr: &choiceExpr{
												pos: position{line: 169, col: 10, offset: 3098},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 173, col: 12, offset: 3151},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 173, col: 12, offset: 3151},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 173, col: 17, offset: 3156},
																expr: &charClassMatcher{
																	pos:        position{line: 173, col: 17, offset: 3156},
																	val:        "[^\\n]",
																	chars:      []rune{'\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 178, col: 8, offset: 3219},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 177, col: 15, offset: 3204},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 179, col: 8, offset: 3231},
							expr: &anyMatcher{
								line: 179, col: 9, offset: 3232,
							},
						},
					},
				},
			},
		},
		{
			name: "Rule",
			pos:  position{line: 24, col: 1, offset: 282},
			expr: &actionExpr{
				pos: position{line: 24, col: 9, offset: 290},
				run: (*parser).callonRule1,
				expr: &seqExpr{
					pos: position{line: 24, col: 9, offset: 290},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 24, col: 9, offset: 290},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 11, offset: 292},
								name: "Value",
							},
						},
						&labeledExpr{
							pos:   position{line: 24, col: 17, offset: 298},
							label: "conds",
							expr: &zeroOrMoreExpr{
								pos: position{line: 24, col: 23, offset: 304},
								expr: &seqExpr{
									pos: position{line: 24, col: 25, offset: 306},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 166, col: 7, offset: 3071},
											expr: &choiceExpr{
												pos: position{line: 169, col: 10, offset: 3098},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 173, col: 12, offset: 3151},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 173, col: 12, offset: 3151},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 173, col: 17, offset: 3156},
																expr: &charClassMatcher{
																	pos:        position{line: 173, col: 17, offset: 3156},
																	val:        "[^\\n]",
																	chars:      []rune{'\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 178, col: 8, offset: 3219},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 177, col: 15, offset: 3204},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 24, col: 28, offset: 309},
											val:        "&&",
											ignoreCase: false,
											want:       "\"&&\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 166, col: 7, offset: 3071},
											expr: &choiceExpr{
												pos: position{line: 169, col: 10, offset: 3098},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 173, col: 12, offset: 3151},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 173, col: 12, offset: 3151},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 173, col: 17, offset: 3156},
																expr: &charClassMatcher{
																	pos:        position{line: 173, col: 17, offset: 3156},
																	val:        "[^\\n]",
																	chars:      []rune{'\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 178, col: 8, offset: 3219},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 177, col: 15, offset: 3204},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 154, col: 14, offset: 2922},
											run: (*parser).callonRule25,
											expr: &oneOrMoreExpr{
												pos: position{line: 154, col: 14, offset: 2922},
												expr: &seqExpr{
													pos: position{line: 154, col: 15, offset: 2923},
													exprs: []interface{}{
														&anyMatcher{
															line: 154, col: 15, offset: 2923,
														},
														&notExpr{
															pos: position{line: 154, col: 17, offset: 2925},
															expr: &litMatcher{
																pos:        position{line: 154, col: 18, offset: 2926},
																val:        "&&",
																ignoreCase: false,
																want:       "\"&&\"",
															},
														},
														&notExpr{
															pos: position{line: 154, col: 23, offset: 2931},
															expr: &litMatcher{
																pos:        position{line: 154, col: 24, offset: 2932},
																val:        "=>",
																ignoreCase: false,
																want:       "\"=>\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 167, col: 6, offset: 3082},
							expr: &choiceExpr{
								pos: position{line: 169, col: 10, offset: 3098},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 173, col: 12, offset: 3151},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 173, col: 12, offset: 3151},
												val:        "//",
												ignoreCase: false,
												want:       "\"//\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 173, col: 17, offset: 3156},
												expr: &charClassMatcher{
													pos:        position{line: 173, col: 17, offset: 3156},
													val:        "[^\\n]",
													chars:      []rune{'\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 178, col: 8, offset: 3219},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 177, col: 15, offset: 3204},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 24, col: 50, offset: 331},
							val:        "=>",
							ignoreCase: false,
							want:       "\"=>\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 167, col: 6, offset: 3082},
							expr: &choiceExpr{
								pos: position{line: 169, col: 10, offset: 3098},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 173, col: 12, offset: 3151},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 173, col: 12, offset: 3151},
												val:        "//",
												ignoreCase: false,
												want:       "\"//\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 173, col: 17, offset: 3156},
												expr: &charClassMatcher{
													pos:        position{line: 173, col: 17, offset: 3156},
													val:        "[^\\n]",
													chars:      []rune{'\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 178, col: 8, offset: 3219},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 177, col: 15, offset: 3204},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 24, col: 57, offset: 338},
							label: "block",
							expr: &zeroOrOneExpr{
								pos: position{line: 24, col: 63, offset: 344},
								expr: &actionExpr{
									pos: position{line: 160, col: 10, offset: 2994},
									run: (*parser).callonRule52,
									expr: &seqExpr{
										pos: position{line: 160, col: 10, offset: 2994},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 160, col: 10, offset: 2994},
												val:        "@",
												ignoreCase: false,
												want:       "\"@\"",
											},
											&oneOrMoreExpr{
												pos: position{line: 160, col: 14, offset: 2998},
												expr: &seqExpr{
													pos: position{line: 160, col: 16, offset: 3000},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 160, col: 16, offset: 3000},
															expr: &charClassMatcher{
																pos:        position{line: 177, col: 15, offset: 3204},
																val:        "[ \\t\\r]",
																chars:      []rune{' ', '\t', '\r'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&anyMatcher{
															line: 160, col: 28, offset: 3012,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 167, col: 6, offset: 3082},
							expr: &choiceExpr{
								pos: position{line: 169, col: 10, offset: 3098},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 173, col: 12, offset: 3151},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 173, col: 12, offset: 3151},
												val:        "//",
												ignoreCase: false,
												want:       "\"//\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 173, col: 17, offset: 3156},
												expr: &charClassMatcher{
													pos:        position{line: 173, col: 17, offset: 3156},
													val:        "[^\\n]",
													chars:      []rune{'\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 178, col: 8, offset: 3219},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 177, col: 15, offset: 3204},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 24, col: 72, offset: 353},
							label: "r",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 74, offset: 355},
								name: "Value",
							},
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 42, col: 1, offset: 698},
			expr: &choiceExpr{
				pos: position{line: 42, col: 10, offset: 707},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 42, col: 10, offset: 707},
						name: "SExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 18, offset: 715},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "SExpr",
			pos:  position{line: 44, col: 1, offset: 721},
			expr: &actionExpr{
				pos: position{line: 44, col: 10, offset: 730},
				run: (*parser).callonSExpr1,
				expr: &seqExpr{
					pos: position{line: 44, col: 10, offset: 730},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 44, col: 10, offset: 730},
							label: "binding",
							expr: &zeroOrOneExpr{
								pos: position{line: 44, col: 18, offset: 738},
								expr: &seqExpr{
									pos: position{line: 44, col: 20, offset: 740},
									exprs: []interface{}{
										&actionExpr{
											pos: position{line: 142, col: 13, offset: 2756},
											run: (*parser).callonSExpr6,
											expr: &seqExpr{
												pos: position{line: 150, col: 10, offset: 2874},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 150, col: 10, offset: 2874},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 150, col: 16, offset: 2880},
														expr: &charClassMatcher{
															pos:        position{line: 150, col: 16, offset: 2880},
															val:        "[_a-zA-Z0-9]",
															chars:      []rune{'_'},
															ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 44, col: 29, offset: 749},
											val:        ":",
											ignoreCase: false,
											want:       "\":\"",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 44, col: 36, offset: 756},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 167, col: 6, offset: 3082},
							expr: &choiceExpr{
								pos: position{line: 169, col: 10, offset: 3098},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 173, col: 12, offset: 3151},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 173, col: 12, offset: 3151},
												val:        "//",
												ignoreCase: false,
												want:       "\"//\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 173, col: 17, offset: 3156},
												expr: &charClassMatcher{
													pos:        position{line: 173, col: 17, offset: 3156},
													val:        "[^\\n]",
													chars:      []rune{'\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 178, col: 8, offset: 3219},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 177, col: 15, offset: 3204},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 44, col: 42, offset: 762},
							label: "op",
							expr: &actionExpr{
								pos: position{line: 81, col: 7, offset: 1564},
								run: (*parser).callonSExpr22,
								expr: &labeledExpr{
									pos:   position{line: 81, col: 7, offset: 1564},
									label: "parts",
									expr: &oneOrMoreExpr{
										pos: position{line: 81, col: 13, offset: 1570},
										expr: &choiceExpr{
											pos: position{line: 81, col: 15, offset: 1572},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 98, col: 11, offset: 1870},
													run: (*parser).callonSExpr26,
													expr: &oneOrMoreExpr{
														pos: position{line: 98, col: 11, offset: 1870},
														expr: &charClassMatcher{
															pos:        position{line: 98, col: 11, offset: 1870},
															val:        "[_a-zA-Z0-9]",
															chars:      []rune{'_'},
															ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&actionExpr{
													pos: position{line: 102, col: 10, offset: 1933},
													run: (*parser).callonSExpr29,
													expr: &seqExpr{
														pos: position{line: 102, col: 10, offset: 1933},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 102, col: 10, offset: 1933},
																val:        "(",
																ignoreCase: false,
																want:       "\"(\"",
															},
															&labeledExpr{
																pos:   position{line: 102, col: 14, offset: 1937},
																label: "first",
																expr: &actionExpr{
																	pos: position{line: 98, col: 11, offset: 1870},
																	run: (*parser).callonSExpr33,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 98, col: 11, offset: 1870},
																		expr: &charClassMatcher{
																			pos:        position{line: 98, col: 11, offset: 1870},
																			val:        "[_a-zA-Z0-9]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 102, col: 27, offset: 1950},
																label: "rest",
																expr: &oneOrMoreExpr{
																	pos: position{line: 102, col: 32, offset: 1955},
																	expr: &seqExpr{
																		pos: position{line: 102, col: 34, offset: 1957},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 102, col: 34, offset: 1957},
																				val:        "|",
																				ignoreCase: false,
																				want:       "\"|\"",
																			},
																			&actionExpr{
																				pos: position{line: 98, col: 11, offset: 1870},
																				run: (*parser).callonSExpr40,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 98, col: 11, offset: 1870},
																					expr: &charClassMatcher{
																						pos:        position{line: 98, col: 11, offset: 1870},
																						val:        "[_a-zA-Z0-9]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 102, col: 48, offset: 1971},
																val:        ")",
																ignoreCase: false,
																want:       "\")\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 44, col: 48, offset: 768},
							label: "operands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 44, col: 57, offset: 777},
								expr: &seqExpr{
									pos: position{line: 44, col: 59, offset: 779},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 166, col: 7, offset: 3071},
											expr: &choiceExpr{
												pos: position{line: 169, col: 10, offset: 3098},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 173, col: 12, offset: 3151},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 173, col: 12, offset: 3151},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 173, col: 17, offset: 3156},
																expr: &charClassMatcher{
																	pos:        position{line: 173, col: 17, offset: 3156},
																	val:        "[^\\n]",
																	chars:      []rune{'\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 178, col: 8, offset: 3219},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 177, col: 15, offset: 3204},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 44, col: 62, offset: 782},
											name: "Operand",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 44, col: 73, offset: 793},
							label: "ellipsis",
							expr: &zeroOrOneExpr{
								pos: position{line: 44, col: 82, offset: 802},
								expr: &seqExpr{
									pos: position{line: 44, col: 84, offset: 804},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 166, col: 7, offset: 3071},
											expr: &choiceExpr{
												pos: position{line: 169, col: 10, offset: 3098},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 173, col: 12, offset: 3151},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 173, col: 12, offset: 3151},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 173, col: 17, offset: 3156},
																expr: &charClassMatcher{
																	pos:        position{line: 173, col: 17, offset: 3156},
																	val:        "[^\\n]",
																	chars:      []rune{'\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 178, col: 8, offset: 3219},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 177, col: 15, offset: 3204},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 44, col: 87, offset: 807},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 44, col: 95, offset: 815},
							label: "trailing",
							expr: &zeroOrOneExpr{
								pos: position{line: 44, col: 104, offset: 824},
								expr: &seqExpr{
									pos: position{line: 44, col: 106, offset: 826},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 166, col: 7, offset: 3071},
											expr: &choiceExpr{
												pos: position{line: 169, col: 10, offset: 3098},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 173, col: 12, offset: 3151},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 173, col: 12, offset: 3151},
																val:        "//",
																ignoreCase: false,
																want:       "\"//\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 173, col: 17, offset: 3156},
																expr: &charClassMatcher{
																	pos:        position{line: 173, col: 17, offset: 3156},
																	val:        "[^\\n]",
																	chars:      []rune{'\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
															&litMatcher{
																pos:        position{line: 178, col: 8, offset: 3219},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
														},
													},
													&charClassMatcher{
														pos:        position{line: 177, col: 15, offset: 3204},
														val:        "[ \\t\\r\\n]",
														chars:      []rune{' ', '\t', '\r', '\n'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 44, col: 109, offset: 829},
											val:        "___",
											ignoreCase: false,
											want:       "\"___\"",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 167, col: 6, offset: 3082},
							expr: &choiceExpr{
								pos: position{line: 169, col: 10, offset: 3098},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 173, col: 12, offset: 3151},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 173, col: 12, offset: 3151},
												val:        "//",
												ignoreCase: false,
												want:       "\"//\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 173, col: 17, offset: 3156},
												expr: &charClassMatcher{
													pos:        position{line: 173, col: 17, offset: 3156},
													val:        "[^\\n]",
													chars:      []rune{'\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 178, col: 8, offset: 3219},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 177, col: 15, offset: 3204},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 44, col: 120, offset: 840},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Operand",
			pos:  position{line: 113, col: 1, offset: 2194},
			expr: &choiceExpr{
				pos: position{line: 113, col: 12, offset: 2205},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 115, col: 9, offset: 2242},
						run: (*parser).callonOperand2,
						expr: &seqExpr{
							pos: position{line: 115, col: 9, offset: 2242},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 115, col: 9, offset: 2242},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 115, col: 13, offset: 2246},
									expr: &charClassMatcher{
										pos:        position{line: 115, col: 13, offset: 2246},
										val:        "[^>]",
										chars:      []rune{'>'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 115, col: 19, offset: 2252},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 120, col: 11, offset: 2332},
						run: (*parser).callonOperand8,
						expr: &seqExpr{
							pos: position{line: 120, col: 11, offset: 2332},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 120, col: 11, offset: 2332},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 120, col: 15, offset: 2336},
									expr: &charClassMatcher{
										pos:        position{line: 120, col: 15, offset: 2336},
										val:        "[^]]",
										chars:      []rune{']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 120, col: 22, offset: 2343},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 125, col: 8, offset: 2422},
						run: (*parser).callonOperand14,
						expr: &seqExpr{
							pos: position{line: 125, col: 8, offset: 2422},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 125, col: 8, offset: 2422},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 125, col: 12, offset: 2426},
									expr: &charClassMatcher{
										pos:        position{line: 125, col: 12, offset: 2426},
										val:        "[^}]",
										chars:      []rune{'}'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 125, col: 18, offset: 2432},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 34, offset: 2227},
						name: "Value",
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 132, col: 1, offset: 2510},
			expr: &choiceExpr{
				pos: position{line: 132, col: 9, offset: 2518},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 132, col: 9, offset: 2518},
						name: "Call",
					},
					&actionExpr{
						pos: position{line: 142, col: 13, offset: 2756},
						run: (*parser).callonExpr3,
						expr: &seqExpr{
							pos: position{line: 150, col: 10, offset: 2874},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 150, col: 10, offset: 2874},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 150, col: 16, offset: 2880},
									expr: &charClassMatcher{
										pos:        position{line: 150, col: 16, offset: 2880},
										val:        "[_a-zA-Z0-9]",
										chars:      []rune{'_'},
										ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 16, offset: 2819},
						run: (*parser).callonExpr8,
						expr: &seqExpr{
							pos: position{line: 146, col: 16, offset: 2819},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 146, col: 16, offset: 2819},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&notExpr{
									pos: position{line: 146, col: 20, offset: 2823},
									expr: &litMatcher{
										pos:        position{line: 146, col: 21, offset: 2824},
										val:        "_",
										ignoreCase: false,
										want:       "\"_\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Call",
			pos:  position{line: 134, col: 1, offset: 2549},
			expr: &actionExpr{
				pos: position{line: 134, col: 9, offset: 2557},
				run: (*parser).callonCall1,
				expr: &seqExpr{
					pos: position{line: 134, col: 9, offset: 2557},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 150, col: 10, offset: 2874},
							val:        "[a-z]",
							ranges:     []rune{'a', 'z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 150, col: 16, offset: 2880},
							expr: &charClassMatcher{
								pos:        position{line: 150, col: 16, offset: 2880},
								val:        "[_a-zA-Z0-9]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 134, col: 15, offset: 2563},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 167, col: 6, offset: 3082},
							expr: &choiceExpr{
								pos: position{line: 169, col: 10, offset: 3098},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 173, col: 12, offset: 3151},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 173, col: 12, offset: 3151},
												val:        "//",
												ignoreCase: false,
												want:       "\"//\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 173, col: 17, offset: 3156},
												expr: &charClassMatcher{
													pos:        position{line: 173, col: 17, offset: 3156},
													val:        "[^\\n]",
													chars:      []rune{'\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 178, col: 8, offset: 3219},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 177, col: 15, offset: 3204},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 21, offset: 2569},
							name: "Expr",
						},
						&zeroOrMoreExpr{
							pos: position{line: 134, col: 26, offset: 2574},
							expr: &seqExpr{
								pos: position{line: 134, col: 28, offset: 2576},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 167, col: 6, offset: 3082},
										expr: &choiceExpr{
											pos: position{line: 169, col: 10, offset: 3098},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 173, col: 12, offset: 3151},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 173, col: 12, offset: 3151},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 173, col: 17, offset: 3156},
															expr: &charClassMatcher{
																pos:        position{line: 173, col: 17, offset: 3156},
																val:        "[^\\n]",
																chars:      []rune{'\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 178, col: 8, offset: 3219},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 177, col: 15, offset: 3204},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 134, col: 30, offset: 2578},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 167, col: 6, offset: 3082},
										expr: &choiceExpr{
											pos: position{line: 169, col: 10, offset: 3098},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 173, col: 12, offset: 3151},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 173, col: 12, offset: 3151},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 173, col: 17, offset: 3156},
															expr: &charClassMatcher{
																pos:        position{line: 173, col: 17, offset: 3156},
																val:        "[^\\n]",
																chars:      []rune{'\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 178, col: 8, offset: 3219},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 177, col: 15, offset: 3204},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 134, col: 36, offset: 2584},
										name: "Expr",
									},
									&zeroOrMoreExpr{
										pos: position{line: 167, col: 6, offset: 3082},
										expr: &choiceExpr{
											pos: position{line: 169, col: 10, offset: 3098},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 173, col: 12, offset: 3151},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 173, col: 12, offset: 3151},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 173, col: 17, offset: 3156},
															expr: &charClassMatcher{
																pos:        position{line: 173, col: 17, offset: 3156},
																val:        "[^\\n]",
																chars:      []rune{'\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
														&litMatcher{
															pos:        position{line: 178, col: 8, offset: 3219},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 177, col: 15, offset: 3204},
													val:        "[ \\t\\r\\n]",
													chars:      []rune{' ', '\t', '\r', '\n'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 167, col: 6, offset: 3082},
							expr: &choiceExpr{
								pos: position{line: 169, col: 10, offset: 3098},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 173, col: 12, offset: 3151},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 173, col: 12, offset: 3151},
												val:        "//",
												ignoreCase: false,
												want:       "\"//\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 173, col: 17, offset: 3156},
												expr: &charClassMatcher{
													pos:        position{line: 173, col: 17, offset: 3156},
													val:        "[^\\n]",
													chars:      []rune{'\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&litMatcher{
												pos:        position{line: 178, col: 8, offset: 3219},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 177, col: 15, offset: 3204},
										val:        "[ \\t\\r\\n]",
										chars:      []rune{' ', '\t', '\r', '\n'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 134, col: 48, offset: 2596},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
	},
}

func (c *current) onFile1(rs interface{}) (interface{}, error) {
	f := &ast.File{}
	for _, i := range rs.([]interface{}) {
		r := i.([]interface{})[1].(*ast.Rule)
		f.Rules = append(f.Rules, r)
	}
	return f, nil
}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["rs"])
}

func (c *current) onRule25() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRule25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRule25()
}

func (c *current) onRule52() (interface{}, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonRule52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRule52()
}

func (c *current) onRule1(m, conds, block, r interface{}) (interface{}, error) {
	rule := &ast.Rule{
		Match:  m.(ast.Value),
		Result: r.(ast.Value),
	}

	for _, i := range conds.([]interface{}) {
		cond := i.([]interface{})[3].(string)
		rule.Conditions = append(rule.Conditions, cond)
	}

	if block != nil {
		rule.Block = block.(string)
	}

	return rule, nil
}

func (p *parser) callonRule1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRule1(stack["m"], stack["conds"], stack["block"], stack["r"])
}

func (c *current) onSExpr6() (interface{}, error) {
	return ast.Variable(c.text), nil
}

func (p *parser) callonSExpr6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSExpr6()
}

func (c *current) onSExpr26() (interface{}, error) {
	return ast.Opcode(c.text), nil
}

func (p *parser) callonSExpr26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSExpr26()
}

func (c *current) onSExpr33() (interface{}, error) {
	return ast.Opcode(c.text), nil
}

func (p *parser) callonSExpr33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSExpr33()
}

func (c *current) onSExpr40() (interface{}, error) {
	return ast.Opcode(c.text), nil
}

func (p *parser) callonSExpr40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSExpr40()
}

func (c *current) onSExpr29(first, rest interface{}) (interface{}, error) {
	alts := ast.OpcodeAlt{first.(ast.Opcode)}
	for _, is := range rest.([]interface{}) {
		alt := is.([]interface{})[1].(ast.Opcode)
		alts = append(alts, alt)
	}
	return alts, nil
}

func (p *parser) callonSExpr29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSExpr29(stack["first"], stack["rest"])
}

func (c *current) onSExpr22(parts interface{}) (interface{}, error) {
	var op ast.OpcodeParts
	for _, i := range parts.([]interface{}) {
		op = append(op, i.(ast.OpPart))
	}

	if len(op) != 1 {
		return op, nil
	}

	if _, ok := op[0].(ast.Opcode); ok {
		return op[0], nil
	}

	return op, nil
}

func (p *parser) callonSExpr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSExpr22(stack["parts"])
}

func (c *current) onSExpr1(binding, op, operands, ellipsis, trailing interface{}) (interface{}, error) {
	s := &ast.SExpr{
		Op: op.(ast.Op),
	}

	if binding != nil {
		s.Binding = binding.([]interface{})[0].(ast.Variable)
	}

	for _, is := range operands.([]interface{}) {
		switch operand := is.([]interface{})[1].(type) {
		case ast.Type:
			s.Type = operand
		case ast.AuxInt:
			s.AuxInt = operand
		case ast.Aux:
			s.Aux = operand
		case ast.Value:
			s.Args = append(s.Args, operand)
		default:
			return nil, errors.New("unknown operand")
		}
	}

	if ellipsis != nil {
		s.Ellipsis = true
	}

	if trailing != nil {
		s.Trailing = true
	}

	return s, nil
}

func (p *parser) callonSExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSExpr1(stack["binding"], stack["op"], stack["operands"], stack["ellipsis"], stack["trailing"])
}

func (c *current) onOperand2() (interface{}, error) {
	n := len(c.text)
	return ast.Type(c.text[1 : n-1]), nil
}

func (p *parser) callonOperand2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand2()
}

func (c *current) onOperand8() (interface{}, error) {
	n := len(c.text)
	return ast.AuxInt(c.text[1 : n-1]), nil
}

func (p *parser) callonOperand8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand8()
}

func (c *current) onOperand14() (interface{}, error) {
	n := len(c.text)
	return ast.Aux(c.text[1 : n-1]), nil
}

func (p *parser) callonOperand14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand14()
}

func (c *current) onExpr3() (interface{}, error) {
	return ast.Variable(c.text), nil
}

func (p *parser) callonExpr3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr3()
}

func (c *current) onExpr8() (interface{}, error) {
	return ast.Placeholder, nil
}

func (p *parser) callonExpr8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr8()
}

func (c *current) onCall1() (interface{}, error) {
	expr, err := goparser.ParseExpr(string(c.text))
	if err != nil {
		return nil, err
	}
	return ast.Expr{Expr: expr}, nil
}

func (p *parser) callonCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCall1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
