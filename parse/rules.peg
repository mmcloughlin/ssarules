{

package parser

import (
    goast "go/ast"
    goparser "go/parser"
)

}

// File

File <- rs:( _ Rule _ )* EOF {
    f := &ast.File{}
    for _, i := range rs.([]interface{}) {
        r := i.([]interface{})[1].(*ast.Rule)
        f.Rules = append(f.Rules, r)
    }
    return f, nil
}

// Rule

Rule <- m:Value cond:( __ "&&" __ Condition)? _ "=>" _ block:Block? _ r:Value {
    rule := &ast.Rule{
        Match: m.(ast.Value),
        Result: r.(ast.Value),
    }

    if cond != nil {
         rule.Condition = cond.([]interface{})[3].(goast.Expr)
    }

    if block != nil {
        rule.Block = block.(string)
    }

    return rule, nil
}

Value <- SExpr / Expr

SExpr <- binding:( Variable ':' )? '(' _ op:Op operands:( __ Operand )* ellipsis:( __ "...")? trailing:( __ "___" )? _ ')' {
    s := &ast.SExpr{
        Op: op.(ast.Op),
    }

    if binding != nil {
        s.Binding = binding.([]interface{})[0].(ast.Variable)
    }

    for _, is := range operands.([]interface{}) {
        switch operand := is.([]interface{})[1].(type) {
        case ast.Type:
            s.Type = operand
        case ast.AuxInt:
            s.AuxInt = operand
        case ast.Aux:
            s.Aux = operand
        case ast.Value:
            s.Args = append(s.Args, operand)
        default:
            return nil, errors.New("unknown operand")
        }
    }

    if ellipsis != nil {
        s.Ellipsis = true
    }

    if trailing != nil {
        s.Trailing = true
    }

    return s, nil
}

// Op

Op <- parts:( OpPart / OpAlt )+ {
    var op ast.OpcodeParts
    for _, i := range parts.([]interface{}) {
        op = append(op, i.(ast.OpPart))
    }

    if len(op) != 1 {
        return op, nil
    }

    if _, ok := op[0].(ast.Opcode); ok {
        return op[0], nil
    }

    return op, nil
}

OpPart <- [_a-zA-Z0-9]+ {
    return ast.Opcode(c.text), nil
}

OpAlt <- '(' first:OpPart rest:( '|' OpPart )+ ')' {
    alts := ast.OpcodeAlt{first.(ast.Opcode)}
    for _, is := range rest.([]interface{}) {
        alt := is.([]interface{})[1].(ast.Opcode)
        alts = append(alts, alt)
    }
    return alts, nil
}

// Operand

Operand <- Type / AuxInt / Aux / Value

Type <- '<' [^>]+ '>' {
    n := len(c.text)
    return ast.Type(c.text[1:n-1]), nil
}

AuxInt <- '[' [^\]]+ ']' {
    n := len(c.text)
    return ast.AuxInt(c.text[1:n-1]), nil
}

Aux <- '{' [^}]+ '}' {
    n := len(c.text)
    return ast.Aux(c.text[1:n-1]), nil
}

// Expr

Expr <- Call / Variable / Placeholder

Call <- Ident '(' _ Expr ( _ ',' _ Expr _ )* _ ')' {
    expr, err := goexpr.Parse(string(c.text))
    if err != nil {
        return nil, err
    }
    return ast.Expr{Expr: expr}, nil
}

Variable <- Ident {
    return ast.Variable(c.text), nil
}

Placeholder <- "_" !"_" {
    return ast.Placeholder, nil
}

Ident <- [a-z] [_a-zA-Z0-9]*

// Condition

Condition <- ( . !"=>" )+ {
    x := string(c.text)
    x = strings.ReplaceAll(x, "\n", " ")
    x = strings.TrimSpace(x)

    cond, err := goexpr.Parse(x)
    if err != nil {
        return nil, err
    }

    return cond, nil
}

// Block

Block <- '@' ( !Whitespace .)+ {
    return string(c.text[1:]), nil
}

// Skip

__ <- Skip+
_ <- Skip*

Skip <- (Comment / Whitespace / EOL)

// Comments

Comment <- "//" [^\n]* EOL

// Character classes

Whitespace <- [ \t\r]
EOL <- '\n'
EOF <- !.
