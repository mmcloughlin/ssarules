(Add(Ptr|32|16|8) ...) => (ADD ...)
(Add(32|64)F ...) => (ADD(F|D) ...)
(Add32carry ...) => (ADDS ...)
(Add32withcarry ...) => (ADC ...)
(Sub(Ptr|32|16|8) ...) => (SUB ...)
(Sub(32|64)F ...) => (SUB(F|D) ...)
(Sub32carry ...) => (SUBS ...)
(Sub32withcarry ...) => (SBC ...)
(Mul(32|16|8) ...) => (MUL ...)
(Mul(32|64)F ...) => (MUL(F|D) ...)
(Hmul(32|32u) ...) => (HMU(L|LU) ...)
(Mul32uhilo ...) => (MULLU ...)
(Div32 x y) => (SUB (XOR <typ.UInt32> (Select0 <typ.UInt32> (CALLudiv (SUB <typ.UInt32> (XOR <typ.UInt32> x (Signmask x)) (Signmask x)) (SUB <typ.UInt32> (XOR <typ.UInt32> y (Signmask y)) (Signmask y)))) (Signmask (XOR <typ.UInt32> x y))) (Signmask (XOR <typ.UInt32> x y)))
(Div32u x y) => (Select0 <typ.UInt32> (CALLudiv x y))
(Div16 x y) => (Div32 (SignExt16to32 x) (SignExt16to32 y))
(Div16u x y) => (Div32u (ZeroExt16to32 x) (ZeroExt16to32 y))
(Div8 x y) => (Div32 (SignExt8to32 x) (SignExt8to32 y))
(Div8u x y) => (Div32u (ZeroExt8to32 x) (ZeroExt8to32 y))
(Div(32|64)F ...) => (DIV(F|D) ...)
(Mod32 x y) => (SUB (XOR <typ.UInt32> (Select1 <typ.UInt32> (CALLudiv (SUB <typ.UInt32> (XOR <typ.UInt32> x (Signmask x)) (Signmask x)) (SUB <typ.UInt32> (XOR <typ.UInt32> y (Signmask y)) (Signmask y)))) (Signmask x)) (Signmask x))
(Mod32u x y) => (Select1 <typ.UInt32> (CALLudiv x y))
(Mod16 x y) => (Mod32 (SignExt16to32 x) (SignExt16to32 y))
(Mod16u x y) => (Mod32u (ZeroExt16to32 x) (ZeroExt16to32 y))
(Mod8 x y) => (Mod32 (SignExt8to32 x) (SignExt8to32 y))
(Mod8u x y) => (Mod32u (ZeroExt8to32 x) (ZeroExt8to32 y))
(Avg32u <t> x y) => (ADD (SRLconst <t> [1] (SUB <t> x y)) y)
(And(32|16|8) ...) => (AND ...)
(Or(32|16|8) ...) => (OR ...)
(Xor(32|16|8) ...) => (XOR ...)
(Neg(32|16|8) x) => (RSBconst [0] x)
(Neg(32|64)F ...) => (NEG(F|D) ...)
(Com(32|16|8) ...) => (MVN ...)
(Sqrt ...) => (SQRTD ...)
(Abs ...) => (ABSD ...)
(Ctz32NonZero ...) => (Ctz32 ...)
(Ctz16NonZero ...) => (Ctz32 ...)
(Ctz8NonZero ...) => (Ctz32 ...)
(Ctz32 <t> x) && objabi.GOARM <= 6 => (RSBconst [32] (CLZ <t> (SUBconst <t> [1] (AND <t> x (RSBconst <t> [0] x)))))
(Ctz16 <t> x) && objabi.GOARM <= 6 => (RSBconst [32] (CLZ <t> (SUBconst <typ.UInt32> [1] (AND <typ.UInt32> (ORconst <typ.UInt32> [0x10000] x) (RSBconst <typ.UInt32> [0] (ORconst <typ.UInt32> [0x10000] x))))))
(Ctz8 <t> x) && objabi.GOARM <= 6 => (RSBconst [32] (CLZ <t> (SUBconst <typ.UInt32> [1] (AND <typ.UInt32> (ORconst <typ.UInt32> [0x100] x) (RSBconst <typ.UInt32> [0] (ORconst <typ.UInt32> [0x100] x))))))
(Ctz32 <t> x) && objabi.GOARM == 7 => (CLZ <t> (RBIT <t> x))
(Ctz16 <t> x) && objabi.GOARM == 7 => (CLZ <t> (RBIT <typ.UInt32> (ORconst <typ.UInt32> [0x10000] x)))
(Ctz8 <t> x) && objabi.GOARM == 7 => (CLZ <t> (RBIT <typ.UInt32> (ORconst <typ.UInt32> [0x100] x)))
(BitLen32 <t> x) => (RSBconst [32] (CLZ <t> x))
(Bswap32 <t> x) && objabi.GOARM == 5 => (XOR <t> (SRLconst <t> [8] (BICconst <t> [0xff0000] (XOR <t> x (SRRconst <t> [16] x)))) (SRRconst <t> [8] x))
(Bswap32 x) && objabi.GOARM >= 6 => (REV x)
(AndB ...) => (AND ...)
(OrB ...) => (OR ...)
(EqB x y) => (XORconst [1] (XOR <typ.Bool> x y))
(NeqB ...) => (XOR ...)
(Not x) => (XORconst [1] x)
(Lsh32x32 x y) => (CMOVWHSconst [0] (SLL <x.Type> x y) (CMPconst [256] y))
(Lsh32x16 x y) => (CMOVWHSconst [0] (SLL <x.Type> x (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)))
(Lsh32x8 x y) => (SLL x (ZeroExt8to32 y))
(Lsh16x32 x y) => (CMOVWHSconst [0] (SLL <x.Type> x y) (CMPconst [256] y))
(Lsh16x16 x y) => (CMOVWHSconst [0] (SLL <x.Type> x (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)))
(Lsh16x8 x y) => (SLL x (ZeroExt8to32 y))
(Lsh8x32 x y) => (CMOVWHSconst [0] (SLL <x.Type> x y) (CMPconst [256] y))
(Lsh8x16 x y) => (CMOVWHSconst [0] (SLL <x.Type> x (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)))
(Lsh8x8 x y) => (SLL x (ZeroExt8to32 y))
(Rsh32Ux32 x y) => (CMOVWHSconst [0] (SRL <x.Type> x y) (CMPconst [256] y))
(Rsh32Ux16 x y) => (CMOVWHSconst [0] (SRL <x.Type> x (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)))
(Rsh32Ux8 x y) => (SRL x (ZeroExt8to32 y))
(Rsh16Ux32 x y) => (CMOVWHSconst [0] (SRL <x.Type> (ZeroExt16to32 x) y) (CMPconst [256] y))
(Rsh16Ux16 x y) => (CMOVWHSconst [0] (SRL <x.Type> (ZeroExt16to32 x) (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)))
(Rsh16Ux8 x y) => (SRL (ZeroExt16to32 x) (ZeroExt8to32 y))
(Rsh8Ux32 x y) => (CMOVWHSconst [0] (SRL <x.Type> (ZeroExt8to32 x) y) (CMPconst [256] y))
(Rsh8Ux16 x y) => (CMOVWHSconst [0] (SRL <x.Type> (ZeroExt8to32 x) (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)))
(Rsh8Ux8 x y) => (SRL (ZeroExt8to32 x) (ZeroExt8to32 y))
(Rsh32x32 x y) => (SRAcond x y (CMPconst [256] y))
(Rsh32x16 x y) => (SRAcond x (ZeroExt16to32 y) (CMPconst [256] (ZeroExt16to32 y)))
(Rsh32x8 x y) => (SRA x (ZeroExt8to32 y))
(Rsh16x32 x y) => (SRAcond (SignExt16to32 x) y (CMPconst [256] y))
(Rsh16x16 x y) => (SRAcond (SignExt16to32 x) (ZeroExt16to32 y) (CMPconst [256] (ZeroExt16to32 y)))
(Rsh16x8 x y) => (SRA (SignExt16to32 x) (ZeroExt8to32 y))
(Rsh8x32 x y) => (SRAcond (SignExt8to32 x) y (CMPconst [256] y))
(Rsh8x16 x y) => (SRAcond (SignExt8to32 x) (ZeroExt16to32 y) (CMPconst [256] (ZeroExt16to32 y)))
(Rsh8x8 x y) => (SRA (SignExt8to32 x) (ZeroExt8to32 y))
(Lsh32x64 x (Const64 [c])) && uint64(c) < 32 => (SLLconst [int32(c)] x)
(Rsh32x64 x (Const64 [c])) && uint64(c) < 32 => (SRAconst [int32(c)] x)
(Rsh32Ux64 x (Const64 [c])) && uint64(c) < 32 => (SRLconst [int32(c)] x)
(Lsh16x64 x (Const64 [c])) && uint64(c) < 16 => (SLLconst [int32(c)] x)
(Rsh16x64 x (Const64 [c])) && uint64(c) < 16 => (SRAconst [int32(c+16)] (SLLconst <typ.UInt32> [16] x))
(Rsh16Ux64 x (Const64 [c])) && uint64(c) < 16 => (SRLconst [int32(c+16)] (SLLconst <typ.UInt32> [16] x))
(Lsh8x64 x (Const64 [c])) && uint64(c) < 8 => (SLLconst [int32(c)] x)
(Rsh8x64 x (Const64 [c])) && uint64(c) < 8 => (SRAconst [int32(c+24)] (SLLconst <typ.UInt32> [24] x))
(Rsh8Ux64 x (Const64 [c])) && uint64(c) < 8 => (SRLconst [int32(c+24)] (SLLconst <typ.UInt32> [24] x))
(Lsh32x64 _ (Const64 [c])) && uint64(c) >= 32 => (Const32 [0])
(Rsh32Ux64 _ (Const64 [c])) && uint64(c) >= 32 => (Const32 [0])
(Lsh16x64 _ (Const64 [c])) && uint64(c) >= 16 => (Const16 [0])
(Rsh16Ux64 _ (Const64 [c])) && uint64(c) >= 16 => (Const16 [0])
(Lsh8x64 _ (Const64 [c])) && uint64(c) >= 8 => (Const8 [0])
(Rsh8Ux64 _ (Const64 [c])) && uint64(c) >= 8 => (Const8 [0])
(Rsh32x64 x (Const64 [c])) && uint64(c) >= 32 => (SRAconst [31] x)
(Rsh16x64 x (Const64 [c])) && uint64(c) >= 16 => (SRAconst [31] (SLLconst <typ.UInt32> [16] x))
(Rsh8x64 x (Const64 [c])) && uint64(c) >= 8 => (SRAconst [31] (SLLconst <typ.UInt32> [24] x))
(Const(8|16|32) [val]) => (MOVWconst [int32(val)])
(Const(32|64)F [val]) => (MOV(F|D)const [float64(val)])
(ConstNil) => (MOVWconst [0])
(ConstBool [b]) => (MOVWconst [b2i32(b)])
(Trunc16to8 ...) => (Copy ...)
(Trunc32to8 ...) => (Copy ...)
(Trunc32to16 ...) => (Copy ...)
(ZeroExt8to16 ...) => (MOVBUreg ...)
(ZeroExt8to32 ...) => (MOVBUreg ...)
(ZeroExt16to32 ...) => (MOVHUreg ...)
(SignExt8to16 ...) => (MOVBreg ...)
(SignExt8to32 ...) => (MOVBreg ...)
(SignExt16to32 ...) => (MOVHreg ...)
(Signmask x) => (SRAconst [31] x)
(Zeromask x) => (SRAconst [31] (RSBshiftRL <typ.Int32> [1] x x))
(Slicemask <t> x) => (SRAconst [31] (RSBconst <t> [0] x))
(Cvt32to32F ...) => (MOVWF ...)
(Cvt32to64F ...) => (MOVWD ...)
(Cvt32Uto32F ...) => (MOVWUF ...)
(Cvt32Uto64F ...) => (MOVWUD ...)
(Cvt32Fto32 ...) => (MOVFW ...)
(Cvt64Fto32 ...) => (MOVDW ...)
(Cvt32Fto32U ...) => (MOVFWU ...)
(Cvt64Fto32U ...) => (MOVDWU ...)
(Cvt32Fto64F ...) => (MOVFD ...)
(Cvt64Fto32F ...) => (MOVDF ...)
(Round(32|64)F ...) => (Copy ...)
(CvtBoolToUint8 ...) => (Copy ...)
(FMA x y z) => (FMULAD z x y)
(Eq8 x y) => (Equal (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
(Eq16 x y) => (Equal (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
(Eq32 x y) => (Equal (CMP x y))
(EqPtr x y) => (Equal (CMP x y))
(Eq(32|64)F x y) => (Equal (CMP(F|D) x y))
(Neq8 x y) => (NotEqual (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
(Neq16 x y) => (NotEqual (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
(Neq32 x y) => (NotEqual (CMP x y))
(NeqPtr x y) => (NotEqual (CMP x y))
(Neq(32|64)F x y) => (NotEqual (CMP(F|D) x y))
(Less8 x y) => (LessThan (CMP (SignExt8to32 x) (SignExt8to32 y)))
(Less16 x y) => (LessThan (CMP (SignExt16to32 x) (SignExt16to32 y)))
(Less32 x y) => (LessThan (CMP x y))
(Less(32|64)F x y) => (GreaterThan (CMP(F|D) y x))
(Less8U x y) => (LessThanU (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
(Less16U x y) => (LessThanU (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
(Less32U x y) => (LessThanU (CMP x y))
(Leq8 x y) => (LessEqual (CMP (SignExt8to32 x) (SignExt8to32 y)))
(Leq16 x y) => (LessEqual (CMP (SignExt16to32 x) (SignExt16to32 y)))
(Leq32 x y) => (LessEqual (CMP x y))
(Leq(32|64)F x y) => (GreaterEqual (CMP(F|D) y x))
(Leq8U x y) => (LessEqualU (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
(Leq16U x y) => (LessEqualU (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
(Leq32U x y) => (LessEqualU (CMP x y))
(OffPtr [off] ptr:(SP)) => (MOVWaddr [int32(off)] ptr)
(OffPtr [off] ptr) => (ADDconst [int32(off)] ptr)
(Addr {sym} base) => (MOVWaddr {sym} base)
(LocalAddr {sym} base _) => (MOVWaddr {sym} base)
(Load <t> ptr mem) && t.IsBoolean() => (MOVBUload ptr mem)
(Load <t> ptr mem) && (is8BitInt(t) && isSigned(t)) => (MOVBload ptr mem)
(Load <t> ptr mem) && (is8BitInt(t) && !isSigned(t)) => (MOVBUload ptr mem)
(Load <t> ptr mem) && (is16BitInt(t) && isSigned(t)) => (MOVHload ptr mem)
(Load <t> ptr mem) && (is16BitInt(t) && !isSigned(t)) => (MOVHUload ptr mem)
(Load <t> ptr mem) && (is32BitInt(t) || isPtr(t)) => (MOVWload ptr mem)
(Load <t> ptr mem) && is32BitFloat(t) => (MOVFload ptr mem)
(Load <t> ptr mem) && is64BitFloat(t) => (MOVDload ptr mem)
(Store {t} ptr val mem) && t.Size() == 1 => (MOVBstore ptr val mem)
(Store {t} ptr val mem) && t.Size() == 2 => (MOVHstore ptr val mem)
(Store {t} ptr val mem) && t.Size() == 4 && !is32BitFloat(val.Type) => (MOVWstore ptr val mem)
(Store {t} ptr val mem) && t.Size() == 4 && is32BitFloat(val.Type) => (MOVFstore ptr val mem)
(Store {t} ptr val mem) && t.Size() == 8 && is64BitFloat(val.Type) => (MOVDstore ptr val mem)
(Zero [0] _ mem) => mem
(Zero [1] ptr mem) => (MOVBstore ptr (MOVWconst [0]) mem)
(Zero [2] {t} ptr mem) && t.Alignment()%2 == 0 => (MOVHstore ptr (MOVWconst [0]) mem)
(Zero [2] ptr mem) => (MOVBstore [1] ptr (MOVWconst [0]) (MOVBstore [0] ptr (MOVWconst [0]) mem))
(Zero [4] {t} ptr mem) && t.Alignment()%4 == 0 => (MOVWstore ptr (MOVWconst [0]) mem)
(Zero [4] {t} ptr mem) && t.Alignment()%2 == 0 => (MOVHstore [2] ptr (MOVWconst [0]) (MOVHstore [0] ptr (MOVWconst [0]) mem))
(Zero [4] ptr mem) => (MOVBstore [3] ptr (MOVWconst [0]) (MOVBstore [2] ptr (MOVWconst [0]) (MOVBstore [1] ptr (MOVWconst [0]) (MOVBstore [0] ptr (MOVWconst [0]) mem))))
(Zero [3] ptr mem) => (MOVBstore [2] ptr (MOVWconst [0]) (MOVBstore [1] ptr (MOVWconst [0]) (MOVBstore [0] ptr (MOVWconst [0]) mem)))
(Zero [s] {t} ptr mem) && s%4 == 0 && s > 4 && s <= 512 && t.Alignment()%4 == 0 && !config.noDuffDevice => (DUFFZERO [4*(128-s/4)] ptr (MOVWconst [0]) mem)
(Zero [s] {t} ptr mem) && (s > 512 || config.noDuffDevice) || t.Alignment()%4 != 0 => (LoweredZero [t.Alignment()] ptr (ADDconst <ptr.Type> [int32(s-moveSize(t.Alignment(), config))] ptr) (MOVWconst [0]) mem)
(Move [0] _ _ mem) => mem
(Move [1] dst src mem) => (MOVBstore dst (MOVBUload src mem) mem)
(Move [2] {t} dst src mem) && t.Alignment()%2 == 0 => (MOVHstore dst (MOVHUload src mem) mem)
(Move [2] dst src mem) => (MOVBstore [1] dst (MOVBUload [1] src mem) (MOVBstore dst (MOVBUload src mem) mem))
(Move [4] {t} dst src mem) && t.Alignment()%4 == 0 => (MOVWstore dst (MOVWload src mem) mem)
(Move [4] {t} dst src mem) && t.Alignment()%2 == 0 => (MOVHstore [2] dst (MOVHUload [2] src mem) (MOVHstore dst (MOVHUload src mem) mem))
(Move [4] dst src mem) => (MOVBstore [3] dst (MOVBUload [3] src mem) (MOVBstore [2] dst (MOVBUload [2] src mem) (MOVBstore [1] dst (MOVBUload [1] src mem) (MOVBstore dst (MOVBUload src mem) mem))))
(Move [3] dst src mem) => (MOVBstore [2] dst (MOVBUload [2] src mem) (MOVBstore [1] dst (MOVBUload [1] src mem) (MOVBstore dst (MOVBUload src mem) mem)))
(Move [s] {t} dst src mem) && s%4 == 0 && s > 4 && s <= 512 && t.Alignment()%4 == 0 && !config.noDuffDevice && logLargeCopy(v, s) => (DUFFCOPY [8*(128-s/4)] dst src mem)
(Move [s] {t} dst src mem) && ((s > 512 || config.noDuffDevice) || t.Alignment()%4 != 0) && logLargeCopy(v, s) => (LoweredMove [t.Alignment()] dst src (ADDconst <src.Type> [int32(s-moveSize(t.Alignment(), config))] src) mem)
(StaticCall ...) => (CALLstatic ...)
(ClosureCall ...) => (CALLclosure ...)
(InterCall ...) => (CALLinter ...)
(NilCheck ...) => (LoweredNilCheck ...)
(IsNonNil ptr) => (NotEqual (CMPconst [0] ptr))
(IsInBounds idx len) => (LessThanU (CMP idx len))
(IsSliceInBounds idx len) => (LessEqualU (CMP idx len))
(GetClosurePtr ...) => (LoweredGetClosurePtr ...)
(GetCallerSP ...) => (LoweredGetCallerSP ...)
(GetCallerPC ...) => (LoweredGetCallerPC ...)
(If (Equal cc) yes no) => (EQ cc yes no)
(If (NotEqual cc) yes no) => (NE cc yes no)
(If (LessThan cc) yes no) => (LT cc yes no)
(If (LessThanU cc) yes no) => (ULT cc yes no)
(If (LessEqual cc) yes no) => (LE cc yes no)
(If (LessEqualU cc) yes no) => (ULE cc yes no)
(If (GreaterThan cc) yes no) => (GT cc yes no)
(If (GreaterThanU cc) yes no) => (UGT cc yes no)
(If (GreaterEqual cc) yes no) => (GE cc yes no)
(If (GreaterEqualU cc) yes no) => (UGE cc yes no)
(If cond yes no) => (NE (CMPconst [0] cond) yes no)
(NE (CMPconst [0] (Equal cc)) yes no) => (EQ cc yes no)
(NE (CMPconst [0] (NotEqual cc)) yes no) => (NE cc yes no)
(NE (CMPconst [0] (LessThan cc)) yes no) => (LT cc yes no)
(NE (CMPconst [0] (LessThanU cc)) yes no) => (ULT cc yes no)
(NE (CMPconst [0] (LessEqual cc)) yes no) => (LE cc yes no)
(NE (CMPconst [0] (LessEqualU cc)) yes no) => (ULE cc yes no)
(NE (CMPconst [0] (GreaterThan cc)) yes no) => (GT cc yes no)
(NE (CMPconst [0] (GreaterThanU cc)) yes no) => (UGT cc yes no)
(NE (CMPconst [0] (GreaterEqual cc)) yes no) => (GE cc yes no)
(NE (CMPconst [0] (GreaterEqualU cc)) yes no) => (UGE cc yes no)
(WB ...) => (LoweredWB ...)
(PanicBounds [kind] x y mem) && boundsABI(kind) == 0 => (LoweredPanicBoundsA [kind] x y mem)
(PanicBounds [kind] x y mem) && boundsABI(kind) == 1 => (LoweredPanicBoundsB [kind] x y mem)
(PanicBounds [kind] x y mem) && boundsABI(kind) == 2 => (LoweredPanicBoundsC [kind] x y mem)
(PanicExtend [kind] hi lo y mem) && boundsABI(kind) == 0 => (LoweredPanicExtendA [kind] hi lo y mem)
(PanicExtend [kind] hi lo y mem) && boundsABI(kind) == 1 => (LoweredPanicExtendB [kind] hi lo y mem)
(PanicExtend [kind] hi lo y mem) && boundsABI(kind) == 2 => (LoweredPanicExtendC [kind] hi lo y mem)
(ADDconst [off1] (MOVWaddr [off2] {sym} ptr)) => (MOVWaddr [off1+off2] {sym} ptr)
(SUBconst [off1] (MOVWaddr [off2] {sym} ptr)) => (MOVWaddr [off2-off1] {sym} ptr)
(MOVBload [off1] {sym} (ADDconst [off2] ptr) mem) => (MOVBload [off1+off2] {sym} ptr mem)
(MOVBload [off1] {sym} (SUBconst [off2] ptr) mem) => (MOVBload [off1-off2] {sym} ptr mem)
(MOVBUload [off1] {sym} (ADDconst [off2] ptr) mem) => (MOVBUload [off1+off2] {sym} ptr mem)
(MOVBUload [off1] {sym} (SUBconst [off2] ptr) mem) => (MOVBUload [off1-off2] {sym} ptr mem)
(MOVHload [off1] {sym} (ADDconst [off2] ptr) mem) => (MOVHload [off1+off2] {sym} ptr mem)
(MOVHload [off1] {sym} (SUBconst [off2] ptr) mem) => (MOVHload [off1-off2] {sym} ptr mem)
(MOVHUload [off1] {sym} (ADDconst [off2] ptr) mem) => (MOVHUload [off1+off2] {sym} ptr mem)
(MOVHUload [off1] {sym} (SUBconst [off2] ptr) mem) => (MOVHUload [off1-off2] {sym} ptr mem)
(MOVWload [off1] {sym} (ADDconst [off2] ptr) mem) => (MOVWload [off1+off2] {sym} ptr mem)
(MOVWload [off1] {sym} (SUBconst [off2] ptr) mem) => (MOVWload [off1-off2] {sym} ptr mem)
(MOVFload [off1] {sym} (ADDconst [off2] ptr) mem) => (MOVFload [off1+off2] {sym} ptr mem)
(MOVFload [off1] {sym} (SUBconst [off2] ptr) mem) => (MOVFload [off1-off2] {sym} ptr mem)
(MOVDload [off1] {sym} (ADDconst [off2] ptr) mem) => (MOVDload [off1+off2] {sym} ptr mem)
(MOVDload [off1] {sym} (SUBconst [off2] ptr) mem) => (MOVDload [off1-off2] {sym} ptr mem)
(MOVBstore [off1] {sym} (ADDconst [off2] ptr) val mem) => (MOVBstore [off1+off2] {sym} ptr val mem)
(MOVBstore [off1] {sym} (SUBconst [off2] ptr) val mem) => (MOVBstore [off1-off2] {sym} ptr val mem)
(MOVHstore [off1] {sym} (ADDconst [off2] ptr) val mem) => (MOVHstore [off1+off2] {sym} ptr val mem)
(MOVHstore [off1] {sym} (SUBconst [off2] ptr) val mem) => (MOVHstore [off1-off2] {sym} ptr val mem)
(MOVWstore [off1] {sym} (ADDconst [off2] ptr) val mem) => (MOVWstore [off1+off2] {sym} ptr val mem)
(MOVWstore [off1] {sym} (SUBconst [off2] ptr) val mem) => (MOVWstore [off1-off2] {sym} ptr val mem)
(MOVFstore [off1] {sym} (ADDconst [off2] ptr) val mem) => (MOVFstore [off1+off2] {sym} ptr val mem)
(MOVFstore [off1] {sym} (SUBconst [off2] ptr) val mem) => (MOVFstore [off1-off2] {sym} ptr val mem)
(MOVDstore [off1] {sym} (ADDconst [off2] ptr) val mem) => (MOVDstore [off1+off2] {sym} ptr val mem)
(MOVDstore [off1] {sym} (SUBconst [off2] ptr) val mem) => (MOVDstore [off1-off2] {sym} ptr val mem)
(MOVBload [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) mem) && canMergeSym(sym1, sym2) => (MOVBload [off1+off2] {mergeSym(sym1, sym2)} ptr mem)
(MOVBUload [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) mem) && canMergeSym(sym1, sym2) => (MOVBUload [off1+off2] {mergeSym(sym1, sym2)} ptr mem)
(MOVHload [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) mem) && canMergeSym(sym1, sym2) => (MOVHload [off1+off2] {mergeSym(sym1, sym2)} ptr mem)
(MOVHUload [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) mem) && canMergeSym(sym1, sym2) => (MOVHUload [off1+off2] {mergeSym(sym1, sym2)} ptr mem)
(MOVWload [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) mem) && canMergeSym(sym1, sym2) => (MOVWload [off1+off2] {mergeSym(sym1, sym2)} ptr mem)
(MOVFload [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) mem) && canMergeSym(sym1, sym2) => (MOVFload [off1+off2] {mergeSym(sym1, sym2)} ptr mem)
(MOVDload [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) mem) && canMergeSym(sym1, sym2) => (MOVDload [off1+off2] {mergeSym(sym1, sym2)} ptr mem)
(MOVBstore [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) val mem) && canMergeSym(sym1, sym2) => (MOVBstore [off1+off2] {mergeSym(sym1, sym2)} ptr val mem)
(MOVHstore [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) val mem) && canMergeSym(sym1, sym2) => (MOVHstore [off1+off2] {mergeSym(sym1, sym2)} ptr val mem)
(MOVWstore [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) val mem) && canMergeSym(sym1, sym2) => (MOVWstore [off1+off2] {mergeSym(sym1, sym2)} ptr val mem)
(MOVFstore [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) val mem) && canMergeSym(sym1, sym2) => (MOVFstore [off1+off2] {mergeSym(sym1, sym2)} ptr val mem)
(MOVDstore [off1] {sym1} (MOVWaddr [off2] {sym2} ptr) val mem) && canMergeSym(sym1, sym2) => (MOVDstore [off1+off2] {mergeSym(sym1, sym2)} ptr val mem)
(MOVBload [off] {sym} ptr (MOVBstore [off2] {sym2} ptr2 x _)) && sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) => (MOVBreg x)
(MOVBUload [off] {sym} ptr (MOVBstore [off2] {sym2} ptr2 x _)) && sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) => (MOVBUreg x)
(MOVHload [off] {sym} ptr (MOVHstore [off2] {sym2} ptr2 x _)) && sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) => (MOVHreg x)
(MOVHUload [off] {sym} ptr (MOVHstore [off2] {sym2} ptr2 x _)) && sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) => (MOVHUreg x)
(MOVWload [off] {sym} ptr (MOVWstore [off2] {sym2} ptr2 x _)) && sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) => x
(MOVFload [off] {sym} ptr (MOVFstore [off2] {sym2} ptr2 x _)) && sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) => x
(MOVDload [off] {sym} ptr (MOVDstore [off2] {sym2} ptr2 x _)) && sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) => x
(MOVWloadidx ptr idx (MOVWstoreidx ptr2 idx x _)) && isSamePtr(ptr, ptr2) => x
(MOVWloadshiftLL [c] ptr idx (MOVWstoreshiftLL [d] ptr2 idx x _)) && c == d && isSamePtr(ptr, ptr2) => x
(MOVWloadshiftRL [c] ptr idx (MOVWstoreshiftRL [d] ptr2 idx x _)) && c == d && isSamePtr(ptr, ptr2) => x
(MOVWloadshiftRA [c] ptr idx (MOVWstoreshiftRA [d] ptr2 idx x _)) && c == d && isSamePtr(ptr, ptr2) => x
(MOVBUloadidx ptr idx (MOVBstoreidx ptr2 idx x _)) && isSamePtr(ptr, ptr2) => (MOVBUreg x)
(MOVBloadidx ptr idx (MOVBstoreidx ptr2 idx x _)) && isSamePtr(ptr, ptr2) => (MOVBreg x)
(MOVHUloadidx ptr idx (MOVHstoreidx ptr2 idx x _)) && isSamePtr(ptr, ptr2) => (MOVHUreg x)
(MOVHloadidx ptr idx (MOVHstoreidx ptr2 idx x _)) && isSamePtr(ptr, ptr2) => (MOVHreg x)
(ADD x (MOVWconst [c])) => (ADDconst [c] x)
(SUB (MOVWconst [c]) x) => (RSBconst [c] x)
(SUB x (MOVWconst [c])) => (SUBconst [c] x)
(RSB (MOVWconst [c]) x) => (SUBconst [c] x)
(RSB x (MOVWconst [c])) => (RSBconst [c] x)
(ADDS x (MOVWconst [c])) => (ADDSconst [c] x)
(SUBS x (MOVWconst [c])) => (SUBSconst [c] x)
(ADC (MOVWconst [c]) x flags) => (ADCconst [c] x flags)
(SBC (MOVWconst [c]) x flags) => (RSCconst [c] x flags)
(SBC x (MOVWconst [c]) flags) => (SBCconst [c] x flags)
(AND x (MOVWconst [c])) => (ANDconst [c] x)
(OR x (MOVWconst [c])) => (ORconst [c] x)
(XOR x (MOVWconst [c])) => (XORconst [c] x)
(BIC x (MOVWconst [c])) => (BICconst [c] x)
(SLL x (MOVWconst [c])) => (SLLconst [c&31] x)
(SRL x (MOVWconst [c])) => (SRLconst [c&31] x)
(SRA x (MOVWconst [c])) => (SRAconst [c&31] x)
(CMP x (MOVWconst [c])) => (CMPconst [c] x)
(CMP (MOVWconst [c]) x) => (InvertFlags (CMPconst [c] x))
(CMN x (MOVWconst [c])) => (CMNconst [c] x)
(TST x (MOVWconst [c])) => (TSTconst [c] x)
(TEQ x (MOVWconst [c])) => (TEQconst [c] x)
(CMP x y) && x.ID > y.ID => (InvertFlags (CMP y x))
(MOVBreg x:(MOVBload _ _)) => (MOVWreg x)
(MOVBUreg x:(MOVBUload _ _)) => (MOVWreg x)
(MOVHreg x:(MOVBload _ _)) => (MOVWreg x)
(MOVHreg x:(MOVBUload _ _)) => (MOVWreg x)
(MOVHreg x:(MOVHload _ _)) => (MOVWreg x)
(MOVHUreg x:(MOVBUload _ _)) => (MOVWreg x)
(MOVHUreg x:(MOVHUload _ _)) => (MOVWreg x)
(MOVBUreg (ANDconst [c] x)) => (ANDconst [c&0xff] x)
(MOVHUreg (ANDconst [c] x)) => (ANDconst [c&0xffff] x)
(MOVBreg (ANDconst [c] x)) && c&0x80 == 0 => (ANDconst [c&0x7f] x)
(MOVHreg (ANDconst [c] x)) && c&0x8000 == 0 => (ANDconst [c&0x7fff] x)
(MOVBreg x:(MOVBreg _)) => (MOVWreg x)
(MOVBUreg x:(MOVBUreg _)) => (MOVWreg x)
(MOVHreg x:(MOVBreg _)) => (MOVWreg x)
(MOVHreg x:(MOVBUreg _)) => (MOVWreg x)
(MOVHreg x:(MOVHreg _)) => (MOVWreg x)
(MOVHUreg x:(MOVBUreg _)) => (MOVWreg x)
(MOVHUreg x:(MOVHUreg _)) => (MOVWreg x)
(MOVBstore [off] {sym} ptr (MOVBreg x) mem) => (MOVBstore [off] {sym} ptr x mem)
(MOVBstore [off] {sym} ptr (MOVBUreg x) mem) => (MOVBstore [off] {sym} ptr x mem)
(MOVBstore [off] {sym} ptr (MOVHreg x) mem) => (MOVBstore [off] {sym} ptr x mem)
(MOVBstore [off] {sym} ptr (MOVHUreg x) mem) => (MOVBstore [off] {sym} ptr x mem)
(MOVHstore [off] {sym} ptr (MOVHreg x) mem) => (MOVHstore [off] {sym} ptr x mem)
(MOVHstore [off] {sym} ptr (MOVHUreg x) mem) => (MOVHstore [off] {sym} ptr x mem)
(MOVWreg x) && x.Uses == 1 => (MOVWnop x)
(MUL x (MOVWconst [c])) && int32(c) == -1 => (RSBconst [0] x)
(MUL _ (MOVWconst [0])) => (MOVWconst [0])
(MUL x (MOVWconst [1])) => x
(MUL x (MOVWconst [c])) && isPowerOfTwo32(c) => (SLLconst [int32(log32(c))] x)
(MUL x (MOVWconst [c])) && isPowerOfTwo32(c-1) && c >= 3 => (ADDshiftLL [int32(log32(c-1))] x x)
(MUL x (MOVWconst [c])) && isPowerOfTwo32(c+1) && c >= 7 => (RSBshiftLL [int32(log32(c+1))] x x)
(MUL x (MOVWconst [c])) && c%3 == 0 && isPowerOfTwo32(c/3) => (SLLconst [int32(log32(c/3))] (ADDshiftLL <x.Type> [1] x x))
(MUL x (MOVWconst [c])) && c%5 == 0 && isPowerOfTwo32(c/5) => (SLLconst [int32(log32(c/5))] (ADDshiftLL <x.Type> [2] x x))
(MUL x (MOVWconst [c])) && c%7 == 0 && isPowerOfTwo32(c/7) => (SLLconst [int32(log32(c/7))] (RSBshiftLL <x.Type> [3] x x))
(MUL x (MOVWconst [c])) && c%9 == 0 && isPowerOfTwo32(c/9) => (SLLconst [int32(log32(c/9))] (ADDshiftLL <x.Type> [3] x x))
(MULA x (MOVWconst [c]) a) && c == -1 => (SUB a x)
(MULA _ (MOVWconst [0]) a) => a
(MULA x (MOVWconst [1]) a) => (ADD x a)
(MULA x (MOVWconst [c]) a) && isPowerOfTwo32(c) => (ADD (SLLconst <x.Type> [int32(log32(c))] x) a)
(MULA x (MOVWconst [c]) a) && isPowerOfTwo32(c-1) && c >= 3 => (ADD (ADDshiftLL <x.Type> [int32(log32(c-1))] x x) a)
(MULA x (MOVWconst [c]) a) && isPowerOfTwo32(c+1) && c >= 7 => (ADD (RSBshiftLL <x.Type> [int32(log32(c+1))] x x) a)
(MULA x (MOVWconst [c]) a) && c%3 == 0 && isPowerOfTwo32(c/3) => (ADD (SLLconst <x.Type> [int32(log32(c/3))] (ADDshiftLL <x.Type> [1] x x)) a)
(MULA x (MOVWconst [c]) a) && c%5 == 0 && isPowerOfTwo32(c/5) => (ADD (SLLconst <x.Type> [int32(log32(c/5))] (ADDshiftLL <x.Type> [2] x x)) a)
(MULA x (MOVWconst [c]) a) && c%7 == 0 && isPowerOfTwo32(c/7) => (ADD (SLLconst <x.Type> [int32(log32(c/7))] (RSBshiftLL <x.Type> [3] x x)) a)
(MULA x (MOVWconst [c]) a) && c%9 == 0 && isPowerOfTwo32(c/9) => (ADD (SLLconst <x.Type> [int32(log32(c/9))] (ADDshiftLL <x.Type> [3] x x)) a)
(MULA (MOVWconst [c]) x a) && c == -1 => (SUB a x)
(MULA (MOVWconst [0]) _ a) => a
(MULA (MOVWconst [1]) x a) => (ADD x a)
(MULA (MOVWconst [c]) x a) && isPowerOfTwo32(c) => (ADD (SLLconst <x.Type> [int32(log32(c))] x) a)
(MULA (MOVWconst [c]) x a) && isPowerOfTwo32(c-1) && c >= 3 => (ADD (ADDshiftLL <x.Type> [int32(log32(c-1))] x x) a)
(MULA (MOVWconst [c]) x a) && isPowerOfTwo32(c+1) && c >= 7 => (ADD (RSBshiftLL <x.Type> [int32(log32(c+1))] x x) a)
(MULA (MOVWconst [c]) x a) && c%3 == 0 && isPowerOfTwo32(c/3) => (ADD (SLLconst <x.Type> [int32(log32(c/3))] (ADDshiftLL <x.Type> [1] x x)) a)
(MULA (MOVWconst [c]) x a) && c%5 == 0 && isPowerOfTwo32(c/5) => (ADD (SLLconst <x.Type> [int32(log32(c/5))] (ADDshiftLL <x.Type> [2] x x)) a)
(MULA (MOVWconst [c]) x a) && c%7 == 0 && isPowerOfTwo32(c/7) => (ADD (SLLconst <x.Type> [int32(log32(c/7))] (RSBshiftLL <x.Type> [3] x x)) a)
(MULA (MOVWconst [c]) x a) && c%9 == 0 && isPowerOfTwo32(c/9) => (ADD (SLLconst <x.Type> [int32(log32(c/9))] (ADDshiftLL <x.Type> [3] x x)) a)
(MULS x (MOVWconst [c]) a) && c == -1 => (ADD a x)
(MULS _ (MOVWconst [0]) a) => a
(MULS x (MOVWconst [1]) a) => (RSB x a)
(MULS x (MOVWconst [c]) a) && isPowerOfTwo32(c) => (RSB (SLLconst <x.Type> [int32(log32(c))] x) a)
(MULS x (MOVWconst [c]) a) && isPowerOfTwo32(c-1) && c >= 3 => (RSB (ADDshiftLL <x.Type> [int32(log32(c-1))] x x) a)
(MULS x (MOVWconst [c]) a) && isPowerOfTwo32(c+1) && c >= 7 => (RSB (RSBshiftLL <x.Type> [int32(log32(c+1))] x x) a)
(MULS x (MOVWconst [c]) a) && c%3 == 0 && isPowerOfTwo32(c/3) => (RSB (SLLconst <x.Type> [int32(log32(c/3))] (ADDshiftLL <x.Type> [1] x x)) a)
(MULS x (MOVWconst [c]) a) && c%5 == 0 && isPowerOfTwo32(c/5) => (RSB (SLLconst <x.Type> [int32(log32(c/5))] (ADDshiftLL <x.Type> [2] x x)) a)
(MULS x (MOVWconst [c]) a) && c%7 == 0 && isPowerOfTwo32(c/7) => (RSB (SLLconst <x.Type> [int32(log32(c/7))] (RSBshiftLL <x.Type> [3] x x)) a)
(MULS x (MOVWconst [c]) a) && c%9 == 0 && isPowerOfTwo32(c/9) => (RSB (SLLconst <x.Type> [int32(log32(c/9))] (ADDshiftLL <x.Type> [3] x x)) a)
(MULS (MOVWconst [c]) x a) && c == -1 => (ADD a x)
(MULS (MOVWconst [0]) _ a) => a
(MULS (MOVWconst [1]) x a) => (RSB x a)
(MULS (MOVWconst [c]) x a) && isPowerOfTwo32(c) => (RSB (SLLconst <x.Type> [int32(log32(c))] x) a)
(MULS (MOVWconst [c]) x a) && isPowerOfTwo32(c-1) && c >= 3 => (RSB (ADDshiftLL <x.Type> [int32(log32(c-1))] x x) a)
(MULS (MOVWconst [c]) x a) && isPowerOfTwo32(c+1) && c >= 7 => (RSB (RSBshiftLL <x.Type> [int32(log32(c+1))] x x) a)
(MULS (MOVWconst [c]) x a) && c%3 == 0 && isPowerOfTwo32(c/3) => (RSB (SLLconst <x.Type> [int32(log32(c/3))] (ADDshiftLL <x.Type> [1] x x)) a)
(MULS (MOVWconst [c]) x a) && c%5 == 0 && isPowerOfTwo32(c/5) => (RSB (SLLconst <x.Type> [int32(log32(c/5))] (ADDshiftLL <x.Type> [2] x x)) a)
(MULS (MOVWconst [c]) x a) && c%7 == 0 && isPowerOfTwo32(c/7) => (RSB (SLLconst <x.Type> [int32(log32(c/7))] (RSBshiftLL <x.Type> [3] x x)) a)
(MULS (MOVWconst [c]) x a) && c%9 == 0 && isPowerOfTwo32(c/9) => (RSB (SLLconst <x.Type> [int32(log32(c/9))] (ADDshiftLL <x.Type> [3] x x)) a)
(Select0 (CALLudiv x (MOVWconst [1]))) => x
(Select1 (CALLudiv _ (MOVWconst [1]))) => (MOVWconst [0])
(Select0 (CALLudiv x (MOVWconst [c]))) && isPowerOfTwo32(c) => (SRLconst [int32(log32(c))] x)
(Select1 (CALLudiv x (MOVWconst [c]))) && isPowerOfTwo32(c) => (ANDconst [c-1] x)
(CMPconst [y] (MOVWconst [x])) => (FlagConstant [subFlags32(x, y)])
(CMNconst [y] (MOVWconst [x])) => (FlagConstant [addFlags32(x, y)])
(TSTconst [y] (MOVWconst [x])) => (FlagConstant [logicFlags32(x&y)])
(TEQconst [y] (MOVWconst [x])) => (FlagConstant [logicFlags32(x^y)])
(CMPconst [c] (MOVBUreg _)) && 0xff < c => (FlagConstant [subFlags32(0, 1)])
(CMPconst [c] (MOVHUreg _)) && 0xffff < c => (FlagConstant [subFlags32(0, 1)])
(CMPconst [n] (ANDconst [m] _)) && 0 <= m && m < n => (FlagConstant [subFlags32(0, 1)])
(CMPconst [n] (SRLconst [c] _)) && 0 <= n && 0 < c && c <= 32 && (1<<uint32(32-c)) <= uint32(n) => (FlagConstant [subFlags32(0, 1)])
(EQ (FlagConstant [fc]) yes no) && fc.eq() => (First yes no)
(EQ (FlagConstant [fc]) yes no) && !fc.eq() => (First no yes)
(NE (FlagConstant [fc]) yes no) && fc.ne() => (First yes no)
(NE (FlagConstant [fc]) yes no) && !fc.ne() => (First no yes)
(LT (FlagConstant [fc]) yes no) && fc.lt() => (First yes no)
(LT (FlagConstant [fc]) yes no) && !fc.lt() => (First no yes)
(LE (FlagConstant [fc]) yes no) && fc.le() => (First yes no)
(LE (FlagConstant [fc]) yes no) && !fc.le() => (First no yes)
(GT (FlagConstant [fc]) yes no) && fc.gt() => (First yes no)
(GT (FlagConstant [fc]) yes no) && !fc.gt() => (First no yes)
(GE (FlagConstant [fc]) yes no) && fc.ge() => (First yes no)
(GE (FlagConstant [fc]) yes no) && !fc.ge() => (First no yes)
(ULT (FlagConstant [fc]) yes no) && fc.ult() => (First yes no)
(ULT (FlagConstant [fc]) yes no) && !fc.ult() => (First no yes)
(ULE (FlagConstant [fc]) yes no) && fc.ule() => (First yes no)
(ULE (FlagConstant [fc]) yes no) && !fc.ule() => (First no yes)
(UGT (FlagConstant [fc]) yes no) && fc.ugt() => (First yes no)
(UGT (FlagConstant [fc]) yes no) && !fc.ugt() => (First no yes)
(UGE (FlagConstant [fc]) yes no) && fc.uge() => (First yes no)
(UGE (FlagConstant [fc]) yes no) && !fc.uge() => (First no yes)
(LTnoov (FlagConstant [fc]) yes no) && fc.ltNoov() => (First yes no)
(LTnoov (FlagConstant [fc]) yes no) && !fc.ltNoov() => (First no yes)
(LEnoov (FlagConstant [fc]) yes no) && fc.leNoov() => (First yes no)
(LEnoov (FlagConstant [fc]) yes no) && !fc.leNoov() => (First no yes)
(GTnoov (FlagConstant [fc]) yes no) && fc.gtNoov() => (First yes no)
(GTnoov (FlagConstant [fc]) yes no) && !fc.gtNoov() => (First no yes)
(GEnoov (FlagConstant [fc]) yes no) && fc.geNoov() => (First yes no)
(GEnoov (FlagConstant [fc]) yes no) && !fc.geNoov() => (First no yes)
(LT (InvertFlags cmp) yes no) => (GT cmp yes no)
(GT (InvertFlags cmp) yes no) => (LT cmp yes no)
(LE (InvertFlags cmp) yes no) => (GE cmp yes no)
(GE (InvertFlags cmp) yes no) => (LE cmp yes no)
(ULT (InvertFlags cmp) yes no) => (UGT cmp yes no)
(UGT (InvertFlags cmp) yes no) => (ULT cmp yes no)
(ULE (InvertFlags cmp) yes no) => (UGE cmp yes no)
(UGE (InvertFlags cmp) yes no) => (ULE cmp yes no)
(EQ (InvertFlags cmp) yes no) => (EQ cmp yes no)
(NE (InvertFlags cmp) yes no) => (NE cmp yes no)
(LTnoov (InvertFlags cmp) yes no) => (GTnoov cmp yes no)
(GEnoov (InvertFlags cmp) yes no) => (LEnoov cmp yes no)
(LEnoov (InvertFlags cmp) yes no) => (GEnoov cmp yes no)
(GTnoov (InvertFlags cmp) yes no) => (LTnoov cmp yes no)
(Equal (FlagConstant [fc])) => (MOVWconst [b2i32(fc.eq())])
(NotEqual (FlagConstant [fc])) => (MOVWconst [b2i32(fc.ne())])
(LessThan (FlagConstant [fc])) => (MOVWconst [b2i32(fc.lt())])
(LessThanU (FlagConstant [fc])) => (MOVWconst [b2i32(fc.ult())])
(LessEqual (FlagConstant [fc])) => (MOVWconst [b2i32(fc.le())])
(LessEqualU (FlagConstant [fc])) => (MOVWconst [b2i32(fc.ule())])
(GreaterThan (FlagConstant [fc])) => (MOVWconst [b2i32(fc.gt())])
(GreaterThanU (FlagConstant [fc])) => (MOVWconst [b2i32(fc.ugt())])
(GreaterEqual (FlagConstant [fc])) => (MOVWconst [b2i32(fc.ge())])
(GreaterEqualU (FlagConstant [fc])) => (MOVWconst [b2i32(fc.uge())])
(Equal (InvertFlags x)) => (Equal x)
(NotEqual (InvertFlags x)) => (NotEqual x)
(LessThan (InvertFlags x)) => (GreaterThan x)
(LessThanU (InvertFlags x)) => (GreaterThanU x)
(GreaterThan (InvertFlags x)) => (LessThan x)
(GreaterThanU (InvertFlags x)) => (LessThanU x)
(LessEqual (InvertFlags x)) => (GreaterEqual x)
(LessEqualU (InvertFlags x)) => (GreaterEqualU x)
(GreaterEqual (InvertFlags x)) => (LessEqual x)
(GreaterEqualU (InvertFlags x)) => (LessEqualU x)
(CMOVWLSconst [c] _ (FlagConstant [fc])) && fc.ule() => (MOVWconst [c])
(CMOVWLSconst [c] x (FlagConstant [fc])) && fc.ugt() => x
(CMOVWHSconst [c] _ (FlagConstant [fc])) && fc.uge() => (MOVWconst [c])
(CMOVWHSconst [c] x (FlagConstant [fc])) && fc.ult() => x
(CMOVWLSconst [c] x (InvertFlags flags)) => (CMOVWHSconst [c] x flags)
(CMOVWHSconst [c] x (InvertFlags flags)) => (CMOVWLSconst [c] x flags)
(SRAcond x _ (FlagConstant [fc])) && fc.uge() => (SRAconst [31] x)
(SRAcond x y (FlagConstant [fc])) && fc.ult() => (SRA x y)
(ADDconst [0] x) => x
(SUBconst [0] x) => x
(ANDconst [0] _) => (MOVWconst [0])
(ANDconst [c] x) && int32(c) == -1 => x
(ORconst [0] x) => x
(ORconst [c] _) && int32(c) == -1 => (MOVWconst [-1])
(XORconst [0] x) => x
(BICconst [0] x) => x
(BICconst [c] _) && int32(c) == -1 => (MOVWconst [0])
(ADDconst [c] x) && !isARMImmRot(uint32(c)) && isARMImmRot(uint32(-c)) => (SUBconst [-c] x)
(SUBconst [c] x) && !isARMImmRot(uint32(c)) && isARMImmRot(uint32(-c)) => (ADDconst [-c] x)
(ANDconst [c] x) && !isARMImmRot(uint32(c)) && isARMImmRot(^uint32(c)) => (BICconst [int32(^uint32(c))] x)
(BICconst [c] x) && !isARMImmRot(uint32(c)) && isARMImmRot(^uint32(c)) => (ANDconst [int32(^uint32(c))] x)
(ADDconst [c] x) && objabi.GOARM == 7 && !isARMImmRot(uint32(c)) && uint32(c) > 0xffff && uint32(-c) <= 0xffff => (SUBconst [-c] x)
(SUBconst [c] x) && objabi.GOARM == 7 && !isARMImmRot(uint32(c)) && uint32(c) > 0xffff && uint32(-c) <= 0xffff => (ADDconst [-c] x)
(ANDconst [c] x) && objabi.GOARM == 7 && !isARMImmRot(uint32(c)) && uint32(c) > 0xffff && ^uint32(c) <= 0xffff => (BICconst [int32(^uint32(c))] x)
(BICconst [c] x) && objabi.GOARM == 7 && !isARMImmRot(uint32(c)) && uint32(c) > 0xffff && ^uint32(c) <= 0xffff => (ANDconst [int32(^uint32(c))] x)
(ADDconst [c] (MOVWconst [d])) => (MOVWconst [c+d])
(ADDconst [c] (ADDconst [d] x)) => (ADDconst [c+d] x)
(ADDconst [c] (SUBconst [d] x)) => (ADDconst [c-d] x)
(ADDconst [c] (RSBconst [d] x)) => (RSBconst [c+d] x)
(ADCconst [c] (ADDconst [d] x) flags) => (ADCconst [c+d] x flags)
(ADCconst [c] (SUBconst [d] x) flags) => (ADCconst [c-d] x flags)
(SUBconst [c] (MOVWconst [d])) => (MOVWconst [d-c])
(SUBconst [c] (SUBconst [d] x)) => (ADDconst [-c-d] x)
(SUBconst [c] (ADDconst [d] x)) => (ADDconst [-c+d] x)
(SUBconst [c] (RSBconst [d] x)) => (RSBconst [-c+d] x)
(SBCconst [c] (ADDconst [d] x) flags) => (SBCconst [c-d] x flags)
(SBCconst [c] (SUBconst [d] x) flags) => (SBCconst [c+d] x flags)
(RSBconst [c] (MOVWconst [d])) => (MOVWconst [c-d])
(RSBconst [c] (RSBconst [d] x)) => (ADDconst [c-d] x)
(RSBconst [c] (ADDconst [d] x)) => (RSBconst [c-d] x)
(RSBconst [c] (SUBconst [d] x)) => (RSBconst [c+d] x)
(RSCconst [c] (ADDconst [d] x) flags) => (RSCconst [c-d] x flags)
(RSCconst [c] (SUBconst [d] x) flags) => (RSCconst [c+d] x flags)
(SLLconst [c] (MOVWconst [d])) => (MOVWconst [d<<uint64(c)])
(SRLconst [c] (MOVWconst [d])) => (MOVWconst [int32(uint32(d)>>uint64(c))])
(SRAconst [c] (MOVWconst [d])) => (MOVWconst [d>>uint64(c)])
(MUL (MOVWconst [c]) (MOVWconst [d])) => (MOVWconst [c*d])
(MULA (MOVWconst [c]) (MOVWconst [d]) a) => (ADDconst [c*d] a)
(MULS (MOVWconst [c]) (MOVWconst [d]) a) => (SUBconst [c*d] a)
(Select0 (CALLudiv (MOVWconst [c]) (MOVWconst [d]))) && d != 0 => (MOVWconst [int32(uint32(c)/uint32(d))])
(Select1 (CALLudiv (MOVWconst [c]) (MOVWconst [d]))) && d != 0 => (MOVWconst [int32(uint32(c)%uint32(d))])
(ANDconst [c] (MOVWconst [d])) => (MOVWconst [c&d])
(ANDconst [c] (ANDconst [d] x)) => (ANDconst [c&d] x)
(ORconst [c] (MOVWconst [d])) => (MOVWconst [c|d])
(ORconst [c] (ORconst [d] x)) => (ORconst [c|d] x)
(XORconst [c] (MOVWconst [d])) => (MOVWconst [c^d])
(XORconst [c] (XORconst [d] x)) => (XORconst [c^d] x)
(BICconst [c] (MOVWconst [d])) => (MOVWconst [d&^c])
(BICconst [c] (BICconst [d] x)) => (BICconst [c|d] x)
(MVN (MOVWconst [c])) => (MOVWconst [^c])
(MOVBreg (MOVWconst [c])) => (MOVWconst [int32(int8(c))])
(MOVBUreg (MOVWconst [c])) => (MOVWconst [int32(uint8(c))])
(MOVHreg (MOVWconst [c])) => (MOVWconst [int32(int16(c))])
(MOVHUreg (MOVWconst [c])) => (MOVWconst [int32(uint16(c))])
(MOVWreg (MOVWconst [c])) => (MOVWconst [c])
(BFX [c] (MOVWconst [d])) => (MOVWconst [d<<(32-uint32(c&0xff)-uint32(c>>8))>>(32-uint32(c>>8))])
(BFXU [c] (MOVWconst [d])) => (MOVWconst [int32(uint32(d)<<(32-uint32(c&0xff)-uint32(c>>8))>>(32-uint32(c>>8)))])
(ADD x (SLLconst [c] y)) => (ADDshiftLL [c] x y)
(ADD x (SRLconst [c] y)) => (ADDshiftRL [c] x y)
(ADD x (SRAconst [c] y)) => (ADDshiftRA [c] x y)
(ADD x (SLL y z)) => (ADDshiftLLreg x y z)
(ADD x (SRL y z)) => (ADDshiftRLreg x y z)
(ADD x (SRA y z)) => (ADDshiftRAreg x y z)
(ADC x (SLLconst [c] y) flags) => (ADCshiftLL [c] x y flags)
(ADC x (SRLconst [c] y) flags) => (ADCshiftRL [c] x y flags)
(ADC x (SRAconst [c] y) flags) => (ADCshiftRA [c] x y flags)
(ADC x (SLL y z) flags) => (ADCshiftLLreg x y z flags)
(ADC x (SRL y z) flags) => (ADCshiftRLreg x y z flags)
(ADC x (SRA y z) flags) => (ADCshiftRAreg x y z flags)
(ADDS x (SLLconst [c] y)) => (ADDSshiftLL [c] x y)
(ADDS x (SRLconst [c] y)) => (ADDSshiftRL [c] x y)
(ADDS x (SRAconst [c] y)) => (ADDSshiftRA [c] x y)
(ADDS x (SLL y z)) => (ADDSshiftLLreg x y z)
(ADDS x (SRL y z)) => (ADDSshiftRLreg x y z)
(ADDS x (SRA y z)) => (ADDSshiftRAreg x y z)
(SUB x (SLLconst [c] y)) => (SUBshiftLL [c] x y)
(SUB (SLLconst [c] y) x) => (RSBshiftLL [c] x y)
(SUB x (SRLconst [c] y)) => (SUBshiftRL [c] x y)
(SUB (SRLconst [c] y) x) => (RSBshiftRL [c] x y)
(SUB x (SRAconst [c] y)) => (SUBshiftRA [c] x y)
(SUB (SRAconst [c] y) x) => (RSBshiftRA [c] x y)
(SUB x (SLL y z)) => (SUBshiftLLreg x y z)
(SUB (SLL y z) x) => (RSBshiftLLreg x y z)
(SUB x (SRL y z)) => (SUBshiftRLreg x y z)
(SUB (SRL y z) x) => (RSBshiftRLreg x y z)
(SUB x (SRA y z)) => (SUBshiftRAreg x y z)
(SUB (SRA y z) x) => (RSBshiftRAreg x y z)
(SBC x (SLLconst [c] y) flags) => (SBCshiftLL [c] x y flags)
(SBC (SLLconst [c] y) x flags) => (RSCshiftLL [c] x y flags)
(SBC x (SRLconst [c] y) flags) => (SBCshiftRL [c] x y flags)
(SBC (SRLconst [c] y) x flags) => (RSCshiftRL [c] x y flags)
(SBC x (SRAconst [c] y) flags) => (SBCshiftRA [c] x y flags)
(SBC (SRAconst [c] y) x flags) => (RSCshiftRA [c] x y flags)
(SBC x (SLL y z) flags) => (SBCshiftLLreg x y z flags)
(SBC (SLL y z) x flags) => (RSCshiftLLreg x y z flags)
(SBC x (SRL y z) flags) => (SBCshiftRLreg x y z flags)
(SBC (SRL y z) x flags) => (RSCshiftRLreg x y z flags)
(SBC x (SRA y z) flags) => (SBCshiftRAreg x y z flags)
(SBC (SRA y z) x flags) => (RSCshiftRAreg x y z flags)
(SUBS x (SLLconst [c] y)) => (SUBSshiftLL [c] x y)
(SUBS (SLLconst [c] y) x) => (RSBSshiftLL [c] x y)
(SUBS x (SRLconst [c] y)) => (SUBSshiftRL [c] x y)
(SUBS (SRLconst [c] y) x) => (RSBSshiftRL [c] x y)
(SUBS x (SRAconst [c] y)) => (SUBSshiftRA [c] x y)
(SUBS (SRAconst [c] y) x) => (RSBSshiftRA [c] x y)
(SUBS x (SLL y z)) => (SUBSshiftLLreg x y z)
(SUBS (SLL y z) x) => (RSBSshiftLLreg x y z)
(SUBS x (SRL y z)) => (SUBSshiftRLreg x y z)
(SUBS (SRL y z) x) => (RSBSshiftRLreg x y z)
(SUBS x (SRA y z)) => (SUBSshiftRAreg x y z)
(SUBS (SRA y z) x) => (RSBSshiftRAreg x y z)
(RSB x (SLLconst [c] y)) => (RSBshiftLL [c] x y)
(RSB (SLLconst [c] y) x) => (SUBshiftLL [c] x y)
(RSB x (SRLconst [c] y)) => (RSBshiftRL [c] x y)
(RSB (SRLconst [c] y) x) => (SUBshiftRL [c] x y)
(RSB x (SRAconst [c] y)) => (RSBshiftRA [c] x y)
(RSB (SRAconst [c] y) x) => (SUBshiftRA [c] x y)
(RSB x (SLL y z)) => (RSBshiftLLreg x y z)
(RSB (SLL y z) x) => (SUBshiftLLreg x y z)
(RSB x (SRL y z)) => (RSBshiftRLreg x y z)
(RSB (SRL y z) x) => (SUBshiftRLreg x y z)
(RSB x (SRA y z)) => (RSBshiftRAreg x y z)
(RSB (SRA y z) x) => (SUBshiftRAreg x y z)
(AND x (SLLconst [c] y)) => (ANDshiftLL [c] x y)
(AND x (SRLconst [c] y)) => (ANDshiftRL [c] x y)
(AND x (SRAconst [c] y)) => (ANDshiftRA [c] x y)
(AND x (SLL y z)) => (ANDshiftLLreg x y z)
(AND x (SRL y z)) => (ANDshiftRLreg x y z)
(AND x (SRA y z)) => (ANDshiftRAreg x y z)
(OR x (SLLconst [c] y)) => (ORshiftLL [c] x y)
(OR x (SRLconst [c] y)) => (ORshiftRL [c] x y)
(OR x (SRAconst [c] y)) => (ORshiftRA [c] x y)
(OR x (SLL y z)) => (ORshiftLLreg x y z)
(OR x (SRL y z)) => (ORshiftRLreg x y z)
(OR x (SRA y z)) => (ORshiftRAreg x y z)
(XOR x (SLLconst [c] y)) => (XORshiftLL [c] x y)
(XOR x (SRLconst [c] y)) => (XORshiftRL [c] x y)
(XOR x (SRAconst [c] y)) => (XORshiftRA [c] x y)
(XOR x (SRRconst [c] y)) => (XORshiftRR [c] x y)
(XOR x (SLL y z)) => (XORshiftLLreg x y z)
(XOR x (SRL y z)) => (XORshiftRLreg x y z)
(XOR x (SRA y z)) => (XORshiftRAreg x y z)
(BIC x (SLLconst [c] y)) => (BICshiftLL [c] x y)
(BIC x (SRLconst [c] y)) => (BICshiftRL [c] x y)
(BIC x (SRAconst [c] y)) => (BICshiftRA [c] x y)
(BIC x (SLL y z)) => (BICshiftLLreg x y z)
(BIC x (SRL y z)) => (BICshiftRLreg x y z)
(BIC x (SRA y z)) => (BICshiftRAreg x y z)
(MVN (SLLconst [c] x)) => (MVNshiftLL [c] x)
(MVN (SRLconst [c] x)) => (MVNshiftRL [c] x)
(MVN (SRAconst [c] x)) => (MVNshiftRA [c] x)
(MVN (SLL x y)) => (MVNshiftLLreg x y)
(MVN (SRL x y)) => (MVNshiftRLreg x y)
(MVN (SRA x y)) => (MVNshiftRAreg x y)
(CMP x (SLLconst [c] y)) => (CMPshiftLL [c] x y)
(CMP (SLLconst [c] y) x) => (InvertFlags (CMPshiftLL [c] x y))
(CMP x (SRLconst [c] y)) => (CMPshiftRL [c] x y)
(CMP (SRLconst [c] y) x) => (InvertFlags (CMPshiftRL [c] x y))
(CMP x (SRAconst [c] y)) => (CMPshiftRA [c] x y)
(CMP (SRAconst [c] y) x) => (InvertFlags (CMPshiftRA [c] x y))
(CMP x (SLL y z)) => (CMPshiftLLreg x y z)
(CMP (SLL y z) x) => (InvertFlags (CMPshiftLLreg x y z))
(CMP x (SRL y z)) => (CMPshiftRLreg x y z)
(CMP (SRL y z) x) => (InvertFlags (CMPshiftRLreg x y z))
(CMP x (SRA y z)) => (CMPshiftRAreg x y z)
(CMP (SRA y z) x) => (InvertFlags (CMPshiftRAreg x y z))
(TST x (SLLconst [c] y)) => (TSTshiftLL [c] x y)
(TST x (SRLconst [c] y)) => (TSTshiftRL [c] x y)
(TST x (SRAconst [c] y)) => (TSTshiftRA [c] x y)
(TST x (SLL y z)) => (TSTshiftLLreg x y z)
(TST x (SRL y z)) => (TSTshiftRLreg x y z)
(TST x (SRA y z)) => (TSTshiftRAreg x y z)
(TEQ x (SLLconst [c] y)) => (TEQshiftLL [c] x y)
(TEQ x (SRLconst [c] y)) => (TEQshiftRL [c] x y)
(TEQ x (SRAconst [c] y)) => (TEQshiftRA [c] x y)
(TEQ x (SLL y z)) => (TEQshiftLLreg x y z)
(TEQ x (SRL y z)) => (TEQshiftRLreg x y z)
(TEQ x (SRA y z)) => (TEQshiftRAreg x y z)
(CMN x (SLLconst [c] y)) => (CMNshiftLL [c] x y)
(CMN x (SRLconst [c] y)) => (CMNshiftRL [c] x y)
(CMN x (SRAconst [c] y)) => (CMNshiftRA [c] x y)
(CMN x (SLL y z)) => (CMNshiftLLreg x y z)
(CMN x (SRL y z)) => (CMNshiftRLreg x y z)
(CMN x (SRA y z)) => (CMNshiftRAreg x y z)
(ADDshiftLL [d] (MOVWconst [c]) x) => (ADDconst [c] (SLLconst <x.Type> [d] x))
(ADDshiftRL [d] (MOVWconst [c]) x) => (ADDconst [c] (SRLconst <x.Type> [d] x))
(ADDshiftRA [d] (MOVWconst [c]) x) => (ADDconst [c] (SRAconst <x.Type> [d] x))
(ADCshiftLL [d] (MOVWconst [c]) x flags) => (ADCconst [c] (SLLconst <x.Type> [d] x) flags)
(ADCshiftRL [d] (MOVWconst [c]) x flags) => (ADCconst [c] (SRLconst <x.Type> [d] x) flags)
(ADCshiftRA [d] (MOVWconst [c]) x flags) => (ADCconst [c] (SRAconst <x.Type> [d] x) flags)
(ADDSshiftLL [d] (MOVWconst [c]) x) => (ADDSconst [c] (SLLconst <x.Type> [d] x))
(ADDSshiftRL [d] (MOVWconst [c]) x) => (ADDSconst [c] (SRLconst <x.Type> [d] x))
(ADDSshiftRA [d] (MOVWconst [c]) x) => (ADDSconst [c] (SRAconst <x.Type> [d] x))
(SUBshiftLL [d] (MOVWconst [c]) x) => (RSBconst [c] (SLLconst <x.Type> [d] x))
(SUBshiftRL [d] (MOVWconst [c]) x) => (RSBconst [c] (SRLconst <x.Type> [d] x))
(SUBshiftRA [d] (MOVWconst [c]) x) => (RSBconst [c] (SRAconst <x.Type> [d] x))
(SBCshiftLL [d] (MOVWconst [c]) x flags) => (RSCconst [c] (SLLconst <x.Type> [d] x) flags)
(SBCshiftRL [d] (MOVWconst [c]) x flags) => (RSCconst [c] (SRLconst <x.Type> [d] x) flags)
(SBCshiftRA [d] (MOVWconst [c]) x flags) => (RSCconst [c] (SRAconst <x.Type> [d] x) flags)
(SUBSshiftLL [d] (MOVWconst [c]) x) => (RSBSconst [c] (SLLconst <x.Type> [d] x))
(SUBSshiftRL [d] (MOVWconst [c]) x) => (RSBSconst [c] (SRLconst <x.Type> [d] x))
(SUBSshiftRA [d] (MOVWconst [c]) x) => (RSBSconst [c] (SRAconst <x.Type> [d] x))
(RSBshiftLL [d] (MOVWconst [c]) x) => (SUBconst [c] (SLLconst <x.Type> [d] x))
(RSBshiftRL [d] (MOVWconst [c]) x) => (SUBconst [c] (SRLconst <x.Type> [d] x))
(RSBshiftRA [d] (MOVWconst [c]) x) => (SUBconst [c] (SRAconst <x.Type> [d] x))
(RSCshiftLL [d] (MOVWconst [c]) x flags) => (SBCconst [c] (SLLconst <x.Type> [d] x) flags)
(RSCshiftRL [d] (MOVWconst [c]) x flags) => (SBCconst [c] (SRLconst <x.Type> [d] x) flags)
(RSCshiftRA [d] (MOVWconst [c]) x flags) => (SBCconst [c] (SRAconst <x.Type> [d] x) flags)
(RSBSshiftLL [d] (MOVWconst [c]) x) => (SUBSconst [c] (SLLconst <x.Type> [d] x))
(RSBSshiftRL [d] (MOVWconst [c]) x) => (SUBSconst [c] (SRLconst <x.Type> [d] x))
(RSBSshiftRA [d] (MOVWconst [c]) x) => (SUBSconst [c] (SRAconst <x.Type> [d] x))
(ANDshiftLL [d] (MOVWconst [c]) x) => (ANDconst [c] (SLLconst <x.Type> [d] x))
(ANDshiftRL [d] (MOVWconst [c]) x) => (ANDconst [c] (SRLconst <x.Type> [d] x))
(ANDshiftRA [d] (MOVWconst [c]) x) => (ANDconst [c] (SRAconst <x.Type> [d] x))
(ORshiftLL [d] (MOVWconst [c]) x) => (ORconst [c] (SLLconst <x.Type> [d] x))
(ORshiftRL [d] (MOVWconst [c]) x) => (ORconst [c] (SRLconst <x.Type> [d] x))
(ORshiftRA [d] (MOVWconst [c]) x) => (ORconst [c] (SRAconst <x.Type> [d] x))
(XORshiftLL [d] (MOVWconst [c]) x) => (XORconst [c] (SLLconst <x.Type> [d] x))
(XORshiftRL [d] (MOVWconst [c]) x) => (XORconst [c] (SRLconst <x.Type> [d] x))
(XORshiftRA [d] (MOVWconst [c]) x) => (XORconst [c] (SRAconst <x.Type> [d] x))
(XORshiftRR [d] (MOVWconst [c]) x) => (XORconst [c] (SRRconst <x.Type> [d] x))
(CMPshiftLL [d] (MOVWconst [c]) x) => (InvertFlags (CMPconst [c] (SLLconst <x.Type> [d] x)))
(CMPshiftRL [d] (MOVWconst [c]) x) => (InvertFlags (CMPconst [c] (SRLconst <x.Type> [d] x)))
(CMPshiftRA [d] (MOVWconst [c]) x) => (InvertFlags (CMPconst [c] (SRAconst <x.Type> [d] x)))
(TSTshiftLL [d] (MOVWconst [c]) x) => (TSTconst [c] (SLLconst <x.Type> [d] x))
(TSTshiftRL [d] (MOVWconst [c]) x) => (TSTconst [c] (SRLconst <x.Type> [d] x))
(TSTshiftRA [d] (MOVWconst [c]) x) => (TSTconst [c] (SRAconst <x.Type> [d] x))
(TEQshiftLL [d] (MOVWconst [c]) x) => (TEQconst [c] (SLLconst <x.Type> [d] x))
(TEQshiftRL [d] (MOVWconst [c]) x) => (TEQconst [c] (SRLconst <x.Type> [d] x))
(TEQshiftRA [d] (MOVWconst [c]) x) => (TEQconst [c] (SRAconst <x.Type> [d] x))
(CMNshiftLL [d] (MOVWconst [c]) x) => (CMNconst [c] (SLLconst <x.Type> [d] x))
(CMNshiftRL [d] (MOVWconst [c]) x) => (CMNconst [c] (SRLconst <x.Type> [d] x))
(CMNshiftRA [d] (MOVWconst [c]) x) => (CMNconst [c] (SRAconst <x.Type> [d] x))
(ADDshiftLLreg (MOVWconst [c]) x y) => (ADDconst [c] (SLL <x.Type> x y))
(ADDshiftRLreg (MOVWconst [c]) x y) => (ADDconst [c] (SRL <x.Type> x y))
(ADDshiftRAreg (MOVWconst [c]) x y) => (ADDconst [c] (SRA <x.Type> x y))
(ADCshiftLLreg (MOVWconst [c]) x y flags) => (ADCconst [c] (SLL <x.Type> x y) flags)
(ADCshiftRLreg (MOVWconst [c]) x y flags) => (ADCconst [c] (SRL <x.Type> x y) flags)
(ADCshiftRAreg (MOVWconst [c]) x y flags) => (ADCconst [c] (SRA <x.Type> x y) flags)
(ADDSshiftLLreg (MOVWconst [c]) x y) => (ADDSconst [c] (SLL <x.Type> x y))
(ADDSshiftRLreg (MOVWconst [c]) x y) => (ADDSconst [c] (SRL <x.Type> x y))
(ADDSshiftRAreg (MOVWconst [c]) x y) => (ADDSconst [c] (SRA <x.Type> x y))
(SUBshiftLLreg (MOVWconst [c]) x y) => (RSBconst [c] (SLL <x.Type> x y))
(SUBshiftRLreg (MOVWconst [c]) x y) => (RSBconst [c] (SRL <x.Type> x y))
(SUBshiftRAreg (MOVWconst [c]) x y) => (RSBconst [c] (SRA <x.Type> x y))
(SBCshiftLLreg (MOVWconst [c]) x y flags) => (RSCconst [c] (SLL <x.Type> x y) flags)
(SBCshiftRLreg (MOVWconst [c]) x y flags) => (RSCconst [c] (SRL <x.Type> x y) flags)
(SBCshiftRAreg (MOVWconst [c]) x y flags) => (RSCconst [c] (SRA <x.Type> x y) flags)
(SUBSshiftLLreg (MOVWconst [c]) x y) => (RSBSconst [c] (SLL <x.Type> x y))
(SUBSshiftRLreg (MOVWconst [c]) x y) => (RSBSconst [c] (SRL <x.Type> x y))
(SUBSshiftRAreg (MOVWconst [c]) x y) => (RSBSconst [c] (SRA <x.Type> x y))
(RSBshiftLLreg (MOVWconst [c]) x y) => (SUBconst [c] (SLL <x.Type> x y))
(RSBshiftRLreg (MOVWconst [c]) x y) => (SUBconst [c] (SRL <x.Type> x y))
(RSBshiftRAreg (MOVWconst [c]) x y) => (SUBconst [c] (SRA <x.Type> x y))
(RSCshiftLLreg (MOVWconst [c]) x y flags) => (SBCconst [c] (SLL <x.Type> x y) flags)
(RSCshiftRLreg (MOVWconst [c]) x y flags) => (SBCconst [c] (SRL <x.Type> x y) flags)
(RSCshiftRAreg (MOVWconst [c]) x y flags) => (SBCconst [c] (SRA <x.Type> x y) flags)
(RSBSshiftLLreg (MOVWconst [c]) x y) => (SUBSconst [c] (SLL <x.Type> x y))
(RSBSshiftRLreg (MOVWconst [c]) x y) => (SUBSconst [c] (SRL <x.Type> x y))
(RSBSshiftRAreg (MOVWconst [c]) x y) => (SUBSconst [c] (SRA <x.Type> x y))
(ANDshiftLLreg (MOVWconst [c]) x y) => (ANDconst [c] (SLL <x.Type> x y))
(ANDshiftRLreg (MOVWconst [c]) x y) => (ANDconst [c] (SRL <x.Type> x y))
(ANDshiftRAreg (MOVWconst [c]) x y) => (ANDconst [c] (SRA <x.Type> x y))
(ORshiftLLreg (MOVWconst [c]) x y) => (ORconst [c] (SLL <x.Type> x y))
(ORshiftRLreg (MOVWconst [c]) x y) => (ORconst [c] (SRL <x.Type> x y))
(ORshiftRAreg (MOVWconst [c]) x y) => (ORconst [c] (SRA <x.Type> x y))
(XORshiftLLreg (MOVWconst [c]) x y) => (XORconst [c] (SLL <x.Type> x y))
(XORshiftRLreg (MOVWconst [c]) x y) => (XORconst [c] (SRL <x.Type> x y))
(XORshiftRAreg (MOVWconst [c]) x y) => (XORconst [c] (SRA <x.Type> x y))
(CMPshiftLLreg (MOVWconst [c]) x y) => (InvertFlags (CMPconst [c] (SLL <x.Type> x y)))
(CMPshiftRLreg (MOVWconst [c]) x y) => (InvertFlags (CMPconst [c] (SRL <x.Type> x y)))
(CMPshiftRAreg (MOVWconst [c]) x y) => (InvertFlags (CMPconst [c] (SRA <x.Type> x y)))
(TSTshiftLLreg (MOVWconst [c]) x y) => (TSTconst [c] (SLL <x.Type> x y))
(TSTshiftRLreg (MOVWconst [c]) x y) => (TSTconst [c] (SRL <x.Type> x y))
(TSTshiftRAreg (MOVWconst [c]) x y) => (TSTconst [c] (SRA <x.Type> x y))
(TEQshiftLLreg (MOVWconst [c]) x y) => (TEQconst [c] (SLL <x.Type> x y))
(TEQshiftRLreg (MOVWconst [c]) x y) => (TEQconst [c] (SRL <x.Type> x y))
(TEQshiftRAreg (MOVWconst [c]) x y) => (TEQconst [c] (SRA <x.Type> x y))
(CMNshiftLLreg (MOVWconst [c]) x y) => (CMNconst [c] (SLL <x.Type> x y))
(CMNshiftRLreg (MOVWconst [c]) x y) => (CMNconst [c] (SRL <x.Type> x y))
(CMNshiftRAreg (MOVWconst [c]) x y) => (CMNconst [c] (SRA <x.Type> x y))
(ADDshiftLL [d] x (MOVWconst [c])) => (ADDconst [c<<uint64(d)] x)
(ADDshiftRL [d] x (MOVWconst [c])) => (ADDconst [int32(uint32(c)>>uint64(d))] x)
(ADDshiftRA [d] x (MOVWconst [c])) => (ADDconst [c>>uint64(d)] x)
(ADCshiftLL [d] x (MOVWconst [c]) flags) => (ADCconst [c<<uint64(d)] x flags)
(ADCshiftRL [d] x (MOVWconst [c]) flags) => (ADCconst [int32(uint32(c)>>uint64(d))] x flags)
(ADCshiftRA [d] x (MOVWconst [c]) flags) => (ADCconst [c>>uint64(d)] x flags)
(ADDSshiftLL [d] x (MOVWconst [c])) => (ADDSconst [c<<uint64(d)] x)
(ADDSshiftRL [d] x (MOVWconst [c])) => (ADDSconst [int32(uint32(c)>>uint64(d))] x)
(ADDSshiftRA [d] x (MOVWconst [c])) => (ADDSconst [c>>uint64(d)] x)
(SUBshiftLL [d] x (MOVWconst [c])) => (SUBconst [c<<uint64(d)] x)
(SUBshiftRL [d] x (MOVWconst [c])) => (SUBconst [int32(uint32(c)>>uint64(d))] x)
(SUBshiftRA [d] x (MOVWconst [c])) => (SUBconst [c>>uint64(d)] x)
(SBCshiftLL [d] x (MOVWconst [c]) flags) => (SBCconst [c<<uint64(d)] x flags)
(SBCshiftRL [d] x (MOVWconst [c]) flags) => (SBCconst [int32(uint32(c)>>uint64(d))] x flags)
(SBCshiftRA [d] x (MOVWconst [c]) flags) => (SBCconst [c>>uint64(d)] x flags)
(SUBSshiftLL [d] x (MOVWconst [c])) => (SUBSconst [c<<uint64(d)] x)
(SUBSshiftRL [d] x (MOVWconst [c])) => (SUBSconst [int32(uint32(c)>>uint64(d))] x)
(SUBSshiftRA [d] x (MOVWconst [c])) => (SUBSconst [c>>uint64(d)] x)
(RSBshiftLL [d] x (MOVWconst [c])) => (RSBconst [c<<uint64(d)] x)
(RSBshiftRL [d] x (MOVWconst [c])) => (RSBconst [int32(uint32(c)>>uint64(d))] x)
(RSBshiftRA [d] x (MOVWconst [c])) => (RSBconst [c>>uint64(d)] x)
(RSCshiftLL [d] x (MOVWconst [c]) flags) => (RSCconst [c<<uint64(d)] x flags)
(RSCshiftRL [d] x (MOVWconst [c]) flags) => (RSCconst [int32(uint32(c)>>uint64(d))] x flags)
(RSCshiftRA [d] x (MOVWconst [c]) flags) => (RSCconst [c>>uint64(d)] x flags)
(RSBSshiftLL [d] x (MOVWconst [c])) => (RSBSconst [c<<uint64(d)] x)
(RSBSshiftRL [d] x (MOVWconst [c])) => (RSBSconst [int32(uint32(c)>>uint64(d))] x)
(RSBSshiftRA [d] x (MOVWconst [c])) => (RSBSconst [c>>uint64(d)] x)
(ANDshiftLL [d] x (MOVWconst [c])) => (ANDconst [c<<uint64(d)] x)
(ANDshiftRL [d] x (MOVWconst [c])) => (ANDconst [int32(uint32(c)>>uint64(d))] x)
(ANDshiftRA [d] x (MOVWconst [c])) => (ANDconst [c>>uint64(d)] x)
(ORshiftLL [d] x (MOVWconst [c])) => (ORconst [c<<uint64(d)] x)
(ORshiftRL [d] x (MOVWconst [c])) => (ORconst [int32(uint32(c)>>uint64(d))] x)
(ORshiftRA [d] x (MOVWconst [c])) => (ORconst [c>>uint64(d)] x)
(XORshiftLL [d] x (MOVWconst [c])) => (XORconst [c<<uint64(d)] x)
(XORshiftRL [d] x (MOVWconst [c])) => (XORconst [int32(uint32(c)>>uint64(d))] x)
(XORshiftRA [d] x (MOVWconst [c])) => (XORconst [c>>uint64(d)] x)
(XORshiftRR [d] x (MOVWconst [c])) => (XORconst [int32(uint32(c)>>uint64(d)|uint32(c)<<uint64(32-d))] x)
(BICshiftLL [d] x (MOVWconst [c])) => (BICconst [c<<uint64(d)] x)
(BICshiftRL [d] x (MOVWconst [c])) => (BICconst [int32(uint32(c)>>uint64(d))] x)
(BICshiftRA [d] x (MOVWconst [c])) => (BICconst [c>>uint64(d)] x)
(MVNshiftLL [d] (MOVWconst [c])) => (MOVWconst [^(c<<uint64(d))])
(MVNshiftRL [d] (MOVWconst [c])) => (MOVWconst [^int32(uint32(c)>>uint64(d))])
(MVNshiftRA [d] (MOVWconst [c])) => (MOVWconst [int32(c)>>uint64(d)])
(CMPshiftLL [d] x (MOVWconst [c])) => (CMPconst [c<<uint64(d)] x)
(CMPshiftRL [d] x (MOVWconst [c])) => (CMPconst [int32(uint32(c)>>uint64(d))] x)
(CMPshiftRA [d] x (MOVWconst [c])) => (CMPconst [c>>uint64(d)] x)
(TSTshiftLL [d] x (MOVWconst [c])) => (TSTconst [c<<uint64(d)] x)
(TSTshiftRL [d] x (MOVWconst [c])) => (TSTconst [int32(uint32(c)>>uint64(d))] x)
(TSTshiftRA [d] x (MOVWconst [c])) => (TSTconst [c>>uint64(d)] x)
(TEQshiftLL [d] x (MOVWconst [c])) => (TEQconst [c<<uint64(d)] x)
(TEQshiftRL [d] x (MOVWconst [c])) => (TEQconst [int32(uint32(c)>>uint64(d))] x)
(TEQshiftRA [d] x (MOVWconst [c])) => (TEQconst [c>>uint64(d)] x)
(CMNshiftLL [d] x (MOVWconst [c])) => (CMNconst [c<<uint64(d)] x)
(CMNshiftRL [d] x (MOVWconst [c])) => (CMNconst [int32(uint32(c)>>uint64(d))] x)
(CMNshiftRA [d] x (MOVWconst [c])) => (CMNconst [c>>uint64(d)] x)
(ADDshiftLLreg x y (MOVWconst [c])) => (ADDshiftLL [c] x y)
(ADDshiftRLreg x y (MOVWconst [c])) => (ADDshiftRL [c] x y)
(ADDshiftRAreg x y (MOVWconst [c])) => (ADDshiftRA [c] x y)
(ADCshiftLLreg x y (MOVWconst [c]) flags) => (ADCshiftLL [c] x y flags)
(ADCshiftRLreg x y (MOVWconst [c]) flags) => (ADCshiftRL [c] x y flags)
(ADCshiftRAreg x y (MOVWconst [c]) flags) => (ADCshiftRA [c] x y flags)
(ADDSshiftLLreg x y (MOVWconst [c])) => (ADDSshiftLL [c] x y)
(ADDSshiftRLreg x y (MOVWconst [c])) => (ADDSshiftRL [c] x y)
(ADDSshiftRAreg x y (MOVWconst [c])) => (ADDSshiftRA [c] x y)
(SUBshiftLLreg x y (MOVWconst [c])) => (SUBshiftLL [c] x y)
(SUBshiftRLreg x y (MOVWconst [c])) => (SUBshiftRL [c] x y)
(SUBshiftRAreg x y (MOVWconst [c])) => (SUBshiftRA [c] x y)
(SBCshiftLLreg x y (MOVWconst [c]) flags) => (SBCshiftLL [c] x y flags)
(SBCshiftRLreg x y (MOVWconst [c]) flags) => (SBCshiftRL [c] x y flags)
(SBCshiftRAreg x y (MOVWconst [c]) flags) => (SBCshiftRA [c] x y flags)
(SUBSshiftLLreg x y (MOVWconst [c])) => (SUBSshiftLL [c] x y)
(SUBSshiftRLreg x y (MOVWconst [c])) => (SUBSshiftRL [c] x y)
(SUBSshiftRAreg x y (MOVWconst [c])) => (SUBSshiftRA [c] x y)
(RSBshiftLLreg x y (MOVWconst [c])) => (RSBshiftLL [c] x y)
(RSBshiftRLreg x y (MOVWconst [c])) => (RSBshiftRL [c] x y)
(RSBshiftRAreg x y (MOVWconst [c])) => (RSBshiftRA [c] x y)
(RSCshiftLLreg x y (MOVWconst [c]) flags) => (RSCshiftLL [c] x y flags)
(RSCshiftRLreg x y (MOVWconst [c]) flags) => (RSCshiftRL [c] x y flags)
(RSCshiftRAreg x y (MOVWconst [c]) flags) => (RSCshiftRA [c] x y flags)
(RSBSshiftLLreg x y (MOVWconst [c])) => (RSBSshiftLL [c] x y)
(RSBSshiftRLreg x y (MOVWconst [c])) => (RSBSshiftRL [c] x y)
(RSBSshiftRAreg x y (MOVWconst [c])) => (RSBSshiftRA [c] x y)
(ANDshiftLLreg x y (MOVWconst [c])) => (ANDshiftLL [c] x y)
(ANDshiftRLreg x y (MOVWconst [c])) => (ANDshiftRL [c] x y)
(ANDshiftRAreg x y (MOVWconst [c])) => (ANDshiftRA [c] x y)
(ORshiftLLreg x y (MOVWconst [c])) => (ORshiftLL [c] x y)
(ORshiftRLreg x y (MOVWconst [c])) => (ORshiftRL [c] x y)
(ORshiftRAreg x y (MOVWconst [c])) => (ORshiftRA [c] x y)
(XORshiftLLreg x y (MOVWconst [c])) => (XORshiftLL [c] x y)
(XORshiftRLreg x y (MOVWconst [c])) => (XORshiftRL [c] x y)
(XORshiftRAreg x y (MOVWconst [c])) => (XORshiftRA [c] x y)
(BICshiftLLreg x y (MOVWconst [c])) => (BICshiftLL [c] x y)
(BICshiftRLreg x y (MOVWconst [c])) => (BICshiftRL [c] x y)
(BICshiftRAreg x y (MOVWconst [c])) => (BICshiftRA [c] x y)
(MVNshiftLLreg x (MOVWconst [c])) => (MVNshiftLL [c] x)
(MVNshiftRLreg x (MOVWconst [c])) => (MVNshiftRL [c] x)
(MVNshiftRAreg x (MOVWconst [c])) => (MVNshiftRA [c] x)
(CMPshiftLLreg x y (MOVWconst [c])) => (CMPshiftLL [c] x y)
(CMPshiftRLreg x y (MOVWconst [c])) => (CMPshiftRL [c] x y)
(CMPshiftRAreg x y (MOVWconst [c])) => (CMPshiftRA [c] x y)
(TSTshiftLLreg x y (MOVWconst [c])) => (TSTshiftLL [c] x y)
(TSTshiftRLreg x y (MOVWconst [c])) => (TSTshiftRL [c] x y)
(TSTshiftRAreg x y (MOVWconst [c])) => (TSTshiftRA [c] x y)
(TEQshiftLLreg x y (MOVWconst [c])) => (TEQshiftLL [c] x y)
(TEQshiftRLreg x y (MOVWconst [c])) => (TEQshiftRL [c] x y)
(TEQshiftRAreg x y (MOVWconst [c])) => (TEQshiftRA [c] x y)
(CMNshiftLLreg x y (MOVWconst [c])) => (CMNshiftLL [c] x y)
(CMNshiftRLreg x y (MOVWconst [c])) => (CMNshiftRL [c] x y)
(CMNshiftRAreg x y (MOVWconst [c])) => (CMNshiftRA [c] x y)
(ADDshiftLL [c] (SRLconst [32-c] x) x) => (SRRconst [32-c] x)
(ORshiftLL [c] (SRLconst [32-c] x) x) => (SRRconst [32-c] x)
(XORshiftLL [c] (SRLconst [32-c] x) x) => (SRRconst [32-c] x)
(ADDshiftRL [c] (SLLconst [32-c] x) x) => (SRRconst [c] x)
(ORshiftRL [c] (SLLconst [32-c] x) x) => (SRRconst [c] x)
(XORshiftRL [c] (SLLconst [32-c] x) x) => (SRRconst [c] x)
(RotateLeft32 x (MOVWconst [c])) => (SRRconst [-c&31] x)
(RotateLeft16 <t> x (MOVWconst [c])) => (Or16 (Lsh16x32 <t> x (MOVWconst [c&15])) (Rsh16Ux32 <t> x (MOVWconst [-c&15])))
(RotateLeft8 <t> x (MOVWconst [c])) => (Or8 (Lsh8x32 <t> x (MOVWconst [c&7])) (Rsh8Ux32 <t> x (MOVWconst [-c&7])))
(RotateLeft32 x y) => (SRR x (RSBconst <y.Type> [0] y))
((ADDshiftLL|ORshiftLL|XORshiftLL) <typ.UInt16> [8] (BFXU <typ.UInt16> [int32(armBFAuxInt(8, 8))] x) x) => (REV16 x)
((ADDshiftLL|ORshiftLL|XORshiftLL) <typ.UInt16> [8] (SRLconst <typ.UInt16> [24] (SLLconst [16] x)) x) && objabi.GOARM >= 6 => (REV16 x)
(MOVWload [0] {sym} (ADD ptr idx) mem) && sym == nil => (MOVWloadidx ptr idx mem)
(MOVWstore [0] {sym} (ADD ptr idx) val mem) && sym == nil => (MOVWstoreidx ptr idx val mem)
(MOVWload [0] {sym} (ADDshiftLL [c] ptr idx) mem) && sym == nil => (MOVWloadshiftLL [c] ptr idx mem)
(MOVWload [0] {sym} (ADDshiftRL [c] ptr idx) mem) && sym == nil => (MOVWloadshiftRL [c] ptr idx mem)
(MOVWload [0] {sym} (ADDshiftRA [c] ptr idx) mem) && sym == nil => (MOVWloadshiftRA [c] ptr idx mem)
(MOVWstore [0] {sym} (ADDshiftLL [c] ptr idx) val mem) && sym == nil => (MOVWstoreshiftLL [c] ptr idx val mem)
(MOVWstore [0] {sym} (ADDshiftRL [c] ptr idx) val mem) && sym == nil => (MOVWstoreshiftRL [c] ptr idx val mem)
(MOVWstore [0] {sym} (ADDshiftRA [c] ptr idx) val mem) && sym == nil => (MOVWstoreshiftRA [c] ptr idx val mem)
(MOVBUload [0] {sym} (ADD ptr idx) mem) && sym == nil => (MOVBUloadidx ptr idx mem)
(MOVBload [0] {sym} (ADD ptr idx) mem) && sym == nil => (MOVBloadidx ptr idx mem)
(MOVBstore [0] {sym} (ADD ptr idx) val mem) && sym == nil => (MOVBstoreidx ptr idx val mem)
(MOVHUload [0] {sym} (ADD ptr idx) mem) && sym == nil => (MOVHUloadidx ptr idx mem)
(MOVHload [0] {sym} (ADD ptr idx) mem) && sym == nil => (MOVHloadidx ptr idx mem)
(MOVHstore [0] {sym} (ADD ptr idx) val mem) && sym == nil => (MOVHstoreidx ptr idx val mem)
(MOVWloadidx ptr (MOVWconst [c]) mem) => (MOVWload [c] ptr mem)
(MOVWloadidx (MOVWconst [c]) ptr mem) => (MOVWload [c] ptr mem)
(MOVBloadidx ptr (MOVWconst [c]) mem) => (MOVBload [c] ptr mem)
(MOVBloadidx (MOVWconst [c]) ptr mem) => (MOVBload [c] ptr mem)
(MOVBUloadidx ptr (MOVWconst [c]) mem) => (MOVBUload [c] ptr mem)
(MOVBUloadidx (MOVWconst [c]) ptr mem) => (MOVBUload [c] ptr mem)
(MOVHUloadidx ptr (MOVWconst [c]) mem) => (MOVHUload [c] ptr mem)
(MOVHUloadidx (MOVWconst [c]) ptr mem) => (MOVHUload [c] ptr mem)
(MOVHloadidx ptr (MOVWconst [c]) mem) => (MOVHload [c] ptr mem)
(MOVHloadidx (MOVWconst [c]) ptr mem) => (MOVHload [c] ptr mem)
(MOVWstoreidx ptr (MOVWconst [c]) val mem) => (MOVWstore [c] ptr val mem)
(MOVWstoreidx (MOVWconst [c]) ptr val mem) => (MOVWstore [c] ptr val mem)
(MOVBstoreidx ptr (MOVWconst [c]) val mem) => (MOVBstore [c] ptr val mem)
(MOVBstoreidx (MOVWconst [c]) ptr val mem) => (MOVBstore [c] ptr val mem)
(MOVHstoreidx ptr (MOVWconst [c]) val mem) => (MOVHstore [c] ptr val mem)
(MOVHstoreidx (MOVWconst [c]) ptr val mem) => (MOVHstore [c] ptr val mem)
(MOVWloadidx ptr (SLLconst [c] idx) mem) => (MOVWloadshiftLL [c] ptr idx mem)
(MOVWloadidx (SLLconst [c] idx) ptr mem) => (MOVWloadshiftLL [c] ptr idx mem)
(MOVWloadidx ptr (SRLconst [c] idx) mem) => (MOVWloadshiftRL [c] ptr idx mem)
(MOVWloadidx (SRLconst [c] idx) ptr mem) => (MOVWloadshiftRL [c] ptr idx mem)
(MOVWloadidx ptr (SRAconst [c] idx) mem) => (MOVWloadshiftRA [c] ptr idx mem)
(MOVWloadidx (SRAconst [c] idx) ptr mem) => (MOVWloadshiftRA [c] ptr idx mem)
(MOVWstoreidx ptr (SLLconst [c] idx) val mem) => (MOVWstoreshiftLL [c] ptr idx val mem)
(MOVWstoreidx (SLLconst [c] idx) ptr val mem) => (MOVWstoreshiftLL [c] ptr idx val mem)
(MOVWstoreidx ptr (SRLconst [c] idx) val mem) => (MOVWstoreshiftRL [c] ptr idx val mem)
(MOVWstoreidx (SRLconst [c] idx) ptr val mem) => (MOVWstoreshiftRL [c] ptr idx val mem)
(MOVWstoreidx ptr (SRAconst [c] idx) val mem) => (MOVWstoreshiftRA [c] ptr idx val mem)
(MOVWstoreidx (SRAconst [c] idx) ptr val mem) => (MOVWstoreshiftRA [c] ptr idx val mem)
(MOVWloadshiftLL [d] ptr (MOVWconst [c]) mem) => (MOVWload [int32(uint32(c)<<uint64(d))] ptr mem)
(MOVWloadshiftRL [d] ptr (MOVWconst [c]) mem) => (MOVWload [int32(uint32(c)>>uint64(d))] ptr mem)
(MOVWloadshiftRA [d] ptr (MOVWconst [c]) mem) => (MOVWload [c>>uint64(d)] ptr mem)
(MOVWstoreshiftLL [d] ptr (MOVWconst [c]) val mem) => (MOVWstore [int32(uint32(c)<<uint64(d))] ptr val mem)
(MOVWstoreshiftRL [d] ptr (MOVWconst [c]) val mem) => (MOVWstore [int32(uint32(c)>>uint64(d))] ptr val mem)
(MOVWstoreshiftRA [d] ptr (MOVWconst [c]) val mem) => (MOVWstore [c>>uint64(d)] ptr val mem)
(ADD x (RSBconst [0] y)) => (SUB x y)
(ADD <t> (RSBconst [c] x) (RSBconst [d] y)) => (RSBconst [c+d] (ADD <t> x y))
(SUB x x) => (MOVWconst [0])
(RSB x x) => (MOVWconst [0])
(AND x x) => x
(OR x x) => x
(XOR x x) => (MOVWconst [0])
(BIC x x) => (MOVWconst [0])
(ADD (MUL x y) a) => (MULA x y a)
(SUB a (MUL x y)) && objabi.GOARM == 7 => (MULS x y a)
(RSB (MUL x y) a) && objabi.GOARM == 7 => (MULS x y a)
(NEGF (MULF x y)) && objabi.GOARM >= 6 => (NMULF x y)
(NEGD (MULD x y)) && objabi.GOARM >= 6 => (NMULD x y)
(MULF (NEGF x) y) && objabi.GOARM >= 6 => (NMULF x y)
(MULD (NEGD x) y) && objabi.GOARM >= 6 => (NMULD x y)
(NMULF (NEGF x) y) => (MULF x y)
(NMULD (NEGD x) y) => (MULD x y)
(ADDF a (MULF x y)) && a.Uses == 1 && objabi.GOARM >= 6 => (MULAF a x y)
(ADDF a (NMULF x y)) && a.Uses == 1 && objabi.GOARM >= 6 => (MULSF a x y)
(ADDD a (MULD x y)) && a.Uses == 1 && objabi.GOARM >= 6 => (MULAD a x y)
(ADDD a (NMULD x y)) && a.Uses == 1 && objabi.GOARM >= 6 => (MULSD a x y)
(SUBF a (MULF x y)) && a.Uses == 1 && objabi.GOARM >= 6 => (MULSF a x y)
(SUBF a (NMULF x y)) && a.Uses == 1 && objabi.GOARM >= 6 => (MULAF a x y)
(SUBD a (MULD x y)) && a.Uses == 1 && objabi.GOARM >= 6 => (MULSD a x y)
(SUBD a (NMULD x y)) && a.Uses == 1 && objabi.GOARM >= 6 => (MULAD a x y)
(AND x (MVN y)) => (BIC x y)
(SUBshiftLL [d] x (SLLconst [c] x)) && c == d => (MOVWconst [0])
(SUBshiftRL [d] x (SRLconst [c] x)) && c == d => (MOVWconst [0])
(SUBshiftRA [d] x (SRAconst [c] x)) && c == d => (MOVWconst [0])
(RSBshiftLL [d] x (SLLconst [c] x)) && c == d => (MOVWconst [0])
(RSBshiftRL [d] x (SRLconst [c] x)) && c == d => (MOVWconst [0])
(RSBshiftRA [d] x (SRAconst [c] x)) && c == d => (MOVWconst [0])
(ANDshiftLL [d] x y:(SLLconst [c] x)) && c == d => y
(ANDshiftRL [d] x y:(SRLconst [c] x)) && c == d => y
(ANDshiftRA [d] x y:(SRAconst [c] x)) && c == d => y
(ORshiftLL [d] x y:(SLLconst [c] x)) && c == d => y
(ORshiftRL [d] x y:(SRLconst [c] x)) && c == d => y
(ORshiftRA [d] x y:(SRAconst [c] x)) && c == d => y
(XORshiftLL [d] x (SLLconst [c] x)) && c == d => (MOVWconst [0])
(XORshiftRL [d] x (SRLconst [c] x)) && c == d => (MOVWconst [0])
(XORshiftRA [d] x (SRAconst [c] x)) && c == d => (MOVWconst [0])
(BICshiftLL [d] x (SLLconst [c] x)) && c == d => (MOVWconst [0])
(BICshiftRL [d] x (SRLconst [c] x)) && c == d => (MOVWconst [0])
(BICshiftRA [d] x (SRAconst [c] x)) && c == d => (MOVWconst [0])
(AND x (MVNshiftLL [c] y)) => (BICshiftLL [c] x y)
(AND x (MVNshiftRL [c] y)) => (BICshiftRL [c] x y)
(AND x (MVNshiftRA [c] y)) => (BICshiftRA [c] x y)
(CMPF x (MOVFconst [0])) => (CMPF0 x)
(CMPD x (MOVDconst [0])) => (CMPD0 x)
(SRAconst [d] (SLLconst [c] x)) && objabi.GOARM == 7 && uint64(d) >= uint64(c) && uint64(d) <= 31 => (BFX [(d-c)|(32-d)<<8] x)
(SRLconst [d] (SLLconst [c] x)) && objabi.GOARM == 7 && uint64(d) >= uint64(c) && uint64(d) <= 31 => (BFXU [(d-c)|(32-d)<<8] x)
((LT|LE|EQ|NE|GE|GT) (CMP x (RSBconst [0] y))) => ((LT|LE|EQ|NE|GE|GT) (CMN x y))
((LT|LE|EQ|NE|GE|GT) (CMN x (RSBconst [0] y))) => ((LT|LE|EQ|NE|GE|GT) (CMP x y))
(EQ (CMPconst [0] l:(SUB x y)) yes no) && l.Uses == 1 => (EQ (CMP x y) yes no)
(EQ (CMPconst [0] l:(MULS x y a)) yes no) && l.Uses == 1 => (EQ (CMP a (MUL <x.Type> x y)) yes no)
(EQ (CMPconst [0] l:(SUBconst [c] x)) yes no) && l.Uses == 1 => (EQ (CMPconst [c] x) yes no)
(EQ (CMPconst [0] l:(SUBshiftLL [c] x y)) yes no) && l.Uses == 1 => (EQ (CMPshiftLL [c] x y) yes no)
(EQ (CMPconst [0] l:(SUBshiftRL [c] x y)) yes no) && l.Uses == 1 => (EQ (CMPshiftRL [c] x y) yes no)
(EQ (CMPconst [0] l:(SUBshiftRA [c] x y)) yes no) && l.Uses == 1 => (EQ (CMPshiftRA [c] x y) yes no)
(EQ (CMPconst [0] l:(SUBshiftLLreg x y z)) yes no) && l.Uses == 1 => (EQ (CMPshiftLLreg x y z) yes no)
(EQ (CMPconst [0] l:(SUBshiftRLreg x y z)) yes no) && l.Uses == 1 => (EQ (CMPshiftRLreg x y z) yes no)
(EQ (CMPconst [0] l:(SUBshiftRAreg x y z)) yes no) && l.Uses == 1 => (EQ (CMPshiftRAreg x y z) yes no)
(NE (CMPconst [0] l:(SUB x y)) yes no) && l.Uses == 1 => (NE (CMP x y) yes no)
(NE (CMPconst [0] l:(MULS x y a)) yes no) && l.Uses == 1 => (NE (CMP a (MUL <x.Type> x y)) yes no)
(NE (CMPconst [0] l:(SUBconst [c] x)) yes no) && l.Uses == 1 => (NE (CMPconst [c] x) yes no)
(NE (CMPconst [0] l:(SUBshiftLL [c] x y)) yes no) && l.Uses == 1 => (NE (CMPshiftLL [c] x y) yes no)
(NE (CMPconst [0] l:(SUBshiftRL [c] x y)) yes no) && l.Uses == 1 => (NE (CMPshiftRL [c] x y) yes no)
(NE (CMPconst [0] l:(SUBshiftRA [c] x y)) yes no) && l.Uses == 1 => (NE (CMPshiftRA [c] x y) yes no)
(NE (CMPconst [0] l:(SUBshiftLLreg x y z)) yes no) && l.Uses == 1 => (NE (CMPshiftLLreg x y z) yes no)
(NE (CMPconst [0] l:(SUBshiftRLreg x y z)) yes no) && l.Uses == 1 => (NE (CMPshiftRLreg x y z) yes no)
(NE (CMPconst [0] l:(SUBshiftRAreg x y z)) yes no) && l.Uses == 1 => (NE (CMPshiftRAreg x y z) yes no)
(EQ (CMPconst [0] l:(ADD x y)) yes no) && l.Uses == 1 => (EQ (CMN x y) yes no)
(EQ (CMPconst [0] l:(MULA x y a)) yes no) && l.Uses == 1 => (EQ (CMN a (MUL <x.Type> x y)) yes no)
(EQ (CMPconst [0] l:(ADDconst [c] x)) yes no) && l.Uses == 1 => (EQ (CMNconst [c] x) yes no)
(EQ (CMPconst [0] l:(ADDshiftLL [c] x y)) yes no) && l.Uses == 1 => (EQ (CMNshiftLL [c] x y) yes no)
(EQ (CMPconst [0] l:(ADDshiftRL [c] x y)) yes no) && l.Uses == 1 => (EQ (CMNshiftRL [c] x y) yes no)
(EQ (CMPconst [0] l:(ADDshiftRA [c] x y)) yes no) && l.Uses == 1 => (EQ (CMNshiftRA [c] x y) yes no)
(EQ (CMPconst [0] l:(ADDshiftLLreg x y z)) yes no) && l.Uses == 1 => (EQ (CMNshiftLLreg x y z) yes no)
(EQ (CMPconst [0] l:(ADDshiftRLreg x y z)) yes no) && l.Uses == 1 => (EQ (CMNshiftRLreg x y z) yes no)
(EQ (CMPconst [0] l:(ADDshiftRAreg x y z)) yes no) && l.Uses == 1 => (EQ (CMNshiftRAreg x y z) yes no)
(NE (CMPconst [0] l:(ADD x y)) yes no) && l.Uses == 1 => (NE (CMN x y) yes no)
(NE (CMPconst [0] l:(MULA x y a)) yes no) && l.Uses == 1 => (NE (CMN a (MUL <x.Type> x y)) yes no)
(NE (CMPconst [0] l:(ADDconst [c] x)) yes no) && l.Uses == 1 => (NE (CMNconst [c] x) yes no)
(NE (CMPconst [0] l:(ADDshiftLL [c] x y)) yes no) && l.Uses == 1 => (NE (CMNshiftLL [c] x y) yes no)
(NE (CMPconst [0] l:(ADDshiftRL [c] x y)) yes no) && l.Uses == 1 => (NE (CMNshiftRL [c] x y) yes no)
(NE (CMPconst [0] l:(ADDshiftRA [c] x y)) yes no) && l.Uses == 1 => (NE (CMNshiftRA [c] x y) yes no)
(NE (CMPconst [0] l:(ADDshiftLLreg x y z)) yes no) && l.Uses == 1 => (NE (CMNshiftLLreg x y z) yes no)
(NE (CMPconst [0] l:(ADDshiftRLreg x y z)) yes no) && l.Uses == 1 => (NE (CMNshiftRLreg x y z) yes no)
(NE (CMPconst [0] l:(ADDshiftRAreg x y z)) yes no) && l.Uses == 1 => (NE (CMNshiftRAreg x y z) yes no)
(EQ (CMPconst [0] l:(AND x y)) yes no) && l.Uses == 1 => (EQ (TST x y) yes no)
(EQ (CMPconst [0] l:(ANDconst [c] x)) yes no) && l.Uses == 1 => (EQ (TSTconst [c] x) yes no)
(EQ (CMPconst [0] l:(ANDshiftLL [c] x y)) yes no) && l.Uses == 1 => (EQ (TSTshiftLL [c] x y) yes no)
(EQ (CMPconst [0] l:(ANDshiftRL [c] x y)) yes no) && l.Uses == 1 => (EQ (TSTshiftRL [c] x y) yes no)
(EQ (CMPconst [0] l:(ANDshiftRA [c] x y)) yes no) && l.Uses == 1 => (EQ (TSTshiftRA [c] x y) yes no)
(EQ (CMPconst [0] l:(ANDshiftLLreg x y z)) yes no) && l.Uses == 1 => (EQ (TSTshiftLLreg x y z) yes no)
(EQ (CMPconst [0] l:(ANDshiftRLreg x y z)) yes no) && l.Uses == 1 => (EQ (TSTshiftRLreg x y z) yes no)
(EQ (CMPconst [0] l:(ANDshiftRAreg x y z)) yes no) && l.Uses == 1 => (EQ (TSTshiftRAreg x y z) yes no)
(NE (CMPconst [0] l:(AND x y)) yes no) && l.Uses == 1 => (NE (TST x y) yes no)
(NE (CMPconst [0] l:(ANDconst [c] x)) yes no) && l.Uses == 1 => (NE (TSTconst [c] x) yes no)
(NE (CMPconst [0] l:(ANDshiftLL [c] x y)) yes no) && l.Uses == 1 => (NE (TSTshiftLL [c] x y) yes no)
(NE (CMPconst [0] l:(ANDshiftRL [c] x y)) yes no) && l.Uses == 1 => (NE (TSTshiftRL [c] x y) yes no)
(NE (CMPconst [0] l:(ANDshiftRA [c] x y)) yes no) && l.Uses == 1 => (NE (TSTshiftRA [c] x y) yes no)
(NE (CMPconst [0] l:(ANDshiftLLreg x y z)) yes no) && l.Uses == 1 => (NE (TSTshiftLLreg x y z) yes no)
(NE (CMPconst [0] l:(ANDshiftRLreg x y z)) yes no) && l.Uses == 1 => (NE (TSTshiftRLreg x y z) yes no)
(NE (CMPconst [0] l:(ANDshiftRAreg x y z)) yes no) && l.Uses == 1 => (NE (TSTshiftRAreg x y z) yes no)
(EQ (CMPconst [0] l:(XOR x y)) yes no) && l.Uses == 1 => (EQ (TEQ x y) yes no)
(EQ (CMPconst [0] l:(XORconst [c] x)) yes no) && l.Uses == 1 => (EQ (TEQconst [c] x) yes no)
(EQ (CMPconst [0] l:(XORshiftLL [c] x y)) yes no) && l.Uses == 1 => (EQ (TEQshiftLL [c] x y) yes no)
(EQ (CMPconst [0] l:(XORshiftRL [c] x y)) yes no) && l.Uses == 1 => (EQ (TEQshiftRL [c] x y) yes no)
(EQ (CMPconst [0] l:(XORshiftRA [c] x y)) yes no) && l.Uses == 1 => (EQ (TEQshiftRA [c] x y) yes no)
(EQ (CMPconst [0] l:(XORshiftLLreg x y z)) yes no) && l.Uses == 1 => (EQ (TEQshiftLLreg x y z) yes no)
(EQ (CMPconst [0] l:(XORshiftRLreg x y z)) yes no) && l.Uses == 1 => (EQ (TEQshiftRLreg x y z) yes no)
(EQ (CMPconst [0] l:(XORshiftRAreg x y z)) yes no) && l.Uses == 1 => (EQ (TEQshiftRAreg x y z) yes no)
(NE (CMPconst [0] l:(XOR x y)) yes no) && l.Uses == 1 => (NE (TEQ x y) yes no)
(NE (CMPconst [0] l:(XORconst [c] x)) yes no) && l.Uses == 1 => (NE (TEQconst [c] x) yes no)
(NE (CMPconst [0] l:(XORshiftLL [c] x y)) yes no) && l.Uses == 1 => (NE (TEQshiftLL [c] x y) yes no)
(NE (CMPconst [0] l:(XORshiftRL [c] x y)) yes no) && l.Uses == 1 => (NE (TEQshiftRL [c] x y) yes no)
(NE (CMPconst [0] l:(XORshiftRA [c] x y)) yes no) && l.Uses == 1 => (NE (TEQshiftRA [c] x y) yes no)
(NE (CMPconst [0] l:(XORshiftLLreg x y z)) yes no) && l.Uses == 1 => (NE (TEQshiftLLreg x y z) yes no)
(NE (CMPconst [0] l:(XORshiftRLreg x y z)) yes no) && l.Uses == 1 => (NE (TEQshiftRLreg x y z) yes no)
(NE (CMPconst [0] l:(XORshiftRAreg x y z)) yes no) && l.Uses == 1 => (NE (TEQshiftRAreg x y z) yes no)
(LT (CMPconst [0] l:(SUB x y)) yes no) && l.Uses == 1 => (LTnoov (CMP x y) yes no)
(LT (CMPconst [0] l:(MULS x y a)) yes no) && l.Uses == 1 => (LTnoov (CMP a (MUL <x.Type> x y)) yes no)
(LT (CMPconst [0] l:(SUBconst [c] x)) yes no) && l.Uses == 1 => (LTnoov (CMPconst [c] x) yes no)
(LT (CMPconst [0] l:(SUBshiftLL [c] x y)) yes no) && l.Uses == 1 => (LTnoov (CMPshiftLL [c] x y) yes no)
(LT (CMPconst [0] l:(SUBshiftRL [c] x y)) yes no) && l.Uses == 1 => (LTnoov (CMPshiftRL [c] x y) yes no)
(LT (CMPconst [0] l:(SUBshiftRA [c] x y)) yes no) && l.Uses == 1 => (LTnoov (CMPshiftRA [c] x y) yes no)
(LT (CMPconst [0] l:(SUBshiftLLreg x y z)) yes no) && l.Uses == 1 => (LTnoov (CMPshiftLLreg x y z) yes no)
(LT (CMPconst [0] l:(SUBshiftRLreg x y z)) yes no) && l.Uses == 1 => (LTnoov (CMPshiftRLreg x y z) yes no)
(LT (CMPconst [0] l:(SUBshiftRAreg x y z)) yes no) && l.Uses == 1 => (LTnoov (CMPshiftRAreg x y z) yes no)
(LE (CMPconst [0] l:(SUB x y)) yes no) && l.Uses == 1 => (LEnoov (CMP x y) yes no)
(LE (CMPconst [0] l:(MULS x y a)) yes no) && l.Uses == 1 => (LEnoov (CMP a (MUL <x.Type> x y)) yes no)
(LE (CMPconst [0] l:(SUBconst [c] x)) yes no) && l.Uses == 1 => (LEnoov (CMPconst [c] x) yes no)
(LE (CMPconst [0] l:(SUBshiftLL [c] x y)) yes no) && l.Uses == 1 => (LEnoov (CMPshiftLL [c] x y) yes no)
(LE (CMPconst [0] l:(SUBshiftRL [c] x y)) yes no) && l.Uses == 1 => (LEnoov (CMPshiftRL [c] x y) yes no)
(LE (CMPconst [0] l:(SUBshiftRA [c] x y)) yes no) && l.Uses == 1 => (LEnoov (CMPshiftRA [c] x y) yes no)
(LE (CMPconst [0] l:(SUBshiftLLreg x y z)) yes no) && l.Uses == 1 => (LEnoov (CMPshiftLLreg x y z) yes no)
(LE (CMPconst [0] l:(SUBshiftRLreg x y z)) yes no) && l.Uses == 1 => (LEnoov (CMPshiftRLreg x y z) yes no)
(LE (CMPconst [0] l:(SUBshiftRAreg x y z)) yes no) && l.Uses == 1 => (LEnoov (CMPshiftRAreg x y z) yes no)
(LT (CMPconst [0] l:(ADD x y)) yes no) && l.Uses == 1 => (LTnoov (CMN x y) yes no)
(LT (CMPconst [0] l:(MULA x y a)) yes no) && l.Uses == 1 => (LTnoov (CMN a (MUL <x.Type> x y)) yes no)
(LT (CMPconst [0] l:(ADDconst [c] x)) yes no) && l.Uses == 1 => (LTnoov (CMNconst [c] x) yes no)
(LT (CMPconst [0] l:(ADDshiftLL [c] x y)) yes no) && l.Uses == 1 => (LTnoov (CMNshiftLL [c] x y) yes no)
(LT (CMPconst [0] l:(ADDshiftRL [c] x y)) yes no) && l.Uses == 1 => (LTnoov (CMNshiftRL [c] x y) yes no)
(LT (CMPconst [0] l:(ADDshiftRA [c] x y)) yes no) && l.Uses == 1 => (LTnoov (CMNshiftRA [c] x y) yes no)
(LT (CMPconst [0] l:(ADDshiftLLreg x y z)) yes no) && l.Uses == 1 => (LTnoov (CMNshiftLLreg x y z) yes no)
(LT (CMPconst [0] l:(ADDshiftRLreg x y z)) yes no) && l.Uses == 1 => (LTnoov (CMNshiftRLreg x y z) yes no)
(LT (CMPconst [0] l:(ADDshiftRAreg x y z)) yes no) && l.Uses == 1 => (LTnoov (CMNshiftRAreg x y z) yes no)
(LE (CMPconst [0] l:(ADD x y)) yes no) && l.Uses == 1 => (LEnoov (CMN x y) yes no)
(LE (CMPconst [0] l:(MULA x y a)) yes no) && l.Uses == 1 => (LEnoov (CMN a (MUL <x.Type> x y)) yes no)
(LE (CMPconst [0] l:(ADDconst [c] x)) yes no) && l.Uses == 1 => (LEnoov (CMNconst [c] x) yes no)
(LE (CMPconst [0] l:(ADDshiftLL [c] x y)) yes no) && l.Uses == 1 => (LEnoov (CMNshiftLL [c] x y) yes no)
(LE (CMPconst [0] l:(ADDshiftRL [c] x y)) yes no) && l.Uses == 1 => (LEnoov (CMNshiftRL [c] x y) yes no)
(LE (CMPconst [0] l:(ADDshiftRA [c] x y)) yes no) && l.Uses == 1 => (LEnoov (CMNshiftRA [c] x y) yes no)
(LE (CMPconst [0] l:(ADDshiftLLreg x y z)) yes no) && l.Uses == 1 => (LEnoov (CMNshiftLLreg x y z) yes no)
(LE (CMPconst [0] l:(ADDshiftRLreg x y z)) yes no) && l.Uses == 1 => (LEnoov (CMNshiftRLreg x y z) yes no)
(LE (CMPconst [0] l:(ADDshiftRAreg x y z)) yes no) && l.Uses == 1 => (LEnoov (CMNshiftRAreg x y z) yes no)
(LT (CMPconst [0] l:(AND x y)) yes no) && l.Uses == 1 => (LTnoov (TST x y) yes no)
(LT (CMPconst [0] l:(ANDconst [c] x)) yes no) && l.Uses == 1 => (LTnoov (TSTconst [c] x) yes no)
(LT (CMPconst [0] l:(ANDshiftLL [c] x y)) yes no) && l.Uses == 1 => (LTnoov (TSTshiftLL [c] x y) yes no)
(LT (CMPconst [0] l:(ANDshiftRL [c] x y)) yes no) && l.Uses == 1 => (LTnoov (TSTshiftRL [c] x y) yes no)
(LT (CMPconst [0] l:(ANDshiftRA [c] x y)) yes no) && l.Uses == 1 => (LTnoov (TSTshiftRA [c] x y) yes no)
(LT (CMPconst [0] l:(ANDshiftLLreg x y z)) yes no) && l.Uses == 1 => (LTnoov (TSTshiftLLreg x y z) yes no)
(LT (CMPconst [0] l:(ANDshiftRLreg x y z)) yes no) && l.Uses == 1 => (LTnoov (TSTshiftRLreg x y z) yes no)
(LT (CMPconst [0] l:(ANDshiftRAreg x y z)) yes no) && l.Uses == 1 => (LTnoov (TSTshiftRAreg x y z) yes no)
(LE (CMPconst [0] l:(AND x y)) yes no) && l.Uses == 1 => (LEnoov (TST x y) yes no)
(LE (CMPconst [0] l:(ANDconst [c] x)) yes no) && l.Uses == 1 => (LEnoov (TSTconst [c] x) yes no)
(LE (CMPconst [0] l:(ANDshiftLL [c] x y)) yes no) && l.Uses == 1 => (LEnoov (TSTshiftLL [c] x y) yes no)
(LE (CMPconst [0] l:(ANDshiftRL [c] x y)) yes no) && l.Uses == 1 => (LEnoov (TSTshiftRL [c] x y) yes no)
(LE (CMPconst [0] l:(ANDshiftRA [c] x y)) yes no) && l.Uses == 1 => (LEnoov (TSTshiftRA [c] x y) yes no)
(LE (CMPconst [0] l:(ANDshiftLLreg x y z)) yes no) && l.Uses == 1 => (LEnoov (TSTshiftLLreg x y z) yes no)
(LE (CMPconst [0] l:(ANDshiftRLreg x y z)) yes no) && l.Uses == 1 => (LEnoov (TSTshiftRLreg x y z) yes no)
(LE (CMPconst [0] l:(ANDshiftRAreg x y z)) yes no) && l.Uses == 1 => (LEnoov (TSTshiftRAreg x y z) yes no)
(LT (CMPconst [0] l:(XOR x y)) yes no) && l.Uses == 1 => (LTnoov (TEQ x y) yes no)
(LT (CMPconst [0] l:(XORconst [c] x)) yes no) && l.Uses == 1 => (LTnoov (TEQconst [c] x) yes no)
(LT (CMPconst [0] l:(XORshiftLL [c] x y)) yes no) && l.Uses == 1 => (LTnoov (TEQshiftLL [c] x y) yes no)
(LT (CMPconst [0] l:(XORshiftRL [c] x y)) yes no) && l.Uses == 1 => (LTnoov (TEQshiftRL [c] x y) yes no)
(LT (CMPconst [0] l:(XORshiftRA [c] x y)) yes no) && l.Uses == 1 => (LTnoov (TEQshiftRA [c] x y) yes no)
(LT (CMPconst [0] l:(XORshiftLLreg x y z)) yes no) && l.Uses == 1 => (LTnoov (TEQshiftLLreg x y z) yes no)
(LT (CMPconst [0] l:(XORshiftRLreg x y z)) yes no) && l.Uses == 1 => (LTnoov (TEQshiftRLreg x y z) yes no)
(LT (CMPconst [0] l:(XORshiftRAreg x y z)) yes no) && l.Uses == 1 => (LTnoov (TEQshiftRAreg x y z) yes no)
(LE (CMPconst [0] l:(XOR x y)) yes no) && l.Uses == 1 => (LEnoov (TEQ x y) yes no)
(LE (CMPconst [0] l:(XORconst [c] x)) yes no) && l.Uses == 1 => (LEnoov (TEQconst [c] x) yes no)
(LE (CMPconst [0] l:(XORshiftLL [c] x y)) yes no) && l.Uses == 1 => (LEnoov (TEQshiftLL [c] x y) yes no)
(LE (CMPconst [0] l:(XORshiftRL [c] x y)) yes no) && l.Uses == 1 => (LEnoov (TEQshiftRL [c] x y) yes no)
(LE (CMPconst [0] l:(XORshiftRA [c] x y)) yes no) && l.Uses == 1 => (LEnoov (TEQshiftRA [c] x y) yes no)
(LE (CMPconst [0] l:(XORshiftLLreg x y z)) yes no) && l.Uses == 1 => (LEnoov (TEQshiftLLreg x y z) yes no)
(LE (CMPconst [0] l:(XORshiftRLreg x y z)) yes no) && l.Uses == 1 => (LEnoov (TEQshiftRLreg x y z) yes no)
(LE (CMPconst [0] l:(XORshiftRAreg x y z)) yes no) && l.Uses == 1 => (LEnoov (TEQshiftRAreg x y z) yes no)
(GT (CMPconst [0] l:(SUB x y)) yes no) && l.Uses == 1 => (GTnoov (CMP x y) yes no)
(GT (CMPconst [0] l:(MULS x y a)) yes no) && l.Uses == 1 => (GTnoov (CMP a (MUL <x.Type> x y)) yes no)
(GT (CMPconst [0] l:(SUBconst [c] x)) yes no) && l.Uses == 1 => (GTnoov (CMPconst [c] x) yes no)
(GT (CMPconst [0] l:(SUBshiftLL [c] x y)) yes no) && l.Uses == 1 => (GTnoov (CMPshiftLL [c] x y) yes no)
(GT (CMPconst [0] l:(SUBshiftRL [c] x y)) yes no) && l.Uses == 1 => (GTnoov (CMPshiftRL [c] x y) yes no)
(GT (CMPconst [0] l:(SUBshiftRA [c] x y)) yes no) && l.Uses == 1 => (GTnoov (CMPshiftRA [c] x y) yes no)
(GT (CMPconst [0] l:(SUBshiftLLreg x y z)) yes no) && l.Uses == 1 => (GTnoov (CMPshiftLLreg x y z) yes no)
(GT (CMPconst [0] l:(SUBshiftRLreg x y z)) yes no) && l.Uses == 1 => (GTnoov (CMPshiftRLreg x y z) yes no)
(GT (CMPconst [0] l:(SUBshiftRAreg x y z)) yes no) && l.Uses == 1 => (GTnoov (CMPshiftRAreg x y z) yes no)
(GE (CMPconst [0] l:(SUB x y)) yes no) && l.Uses == 1 => (GEnoov (CMP x y) yes no)
(GE (CMPconst [0] l:(MULS x y a)) yes no) && l.Uses == 1 => (GEnoov (CMP a (MUL <x.Type> x y)) yes no)
(GE (CMPconst [0] l:(SUBconst [c] x)) yes no) && l.Uses == 1 => (GEnoov (CMPconst [c] x) yes no)
(GE (CMPconst [0] l:(SUBshiftLL [c] x y)) yes no) && l.Uses == 1 => (GEnoov (CMPshiftLL [c] x y) yes no)
(GE (CMPconst [0] l:(SUBshiftRL [c] x y)) yes no) && l.Uses == 1 => (GEnoov (CMPshiftRL [c] x y) yes no)
(GE (CMPconst [0] l:(SUBshiftRA [c] x y)) yes no) && l.Uses == 1 => (GEnoov (CMPshiftRA [c] x y) yes no)
(GE (CMPconst [0] l:(SUBshiftLLreg x y z)) yes no) && l.Uses == 1 => (GEnoov (CMPshiftLLreg x y z) yes no)
(GE (CMPconst [0] l:(SUBshiftRLreg x y z)) yes no) && l.Uses == 1 => (GEnoov (CMPshiftRLreg x y z) yes no)
(GE (CMPconst [0] l:(SUBshiftRAreg x y z)) yes no) && l.Uses == 1 => (GEnoov (CMPshiftRAreg x y z) yes no)
(GT (CMPconst [0] l:(ADD x y)) yes no) && l.Uses == 1 => (GTnoov (CMN x y) yes no)
(GT (CMPconst [0] l:(ADDconst [c] x)) yes no) && l.Uses == 1 => (GTnoov (CMNconst [c] x) yes no)
(GT (CMPconst [0] l:(ADDshiftLL [c] x y)) yes no) && l.Uses == 1 => (GTnoov (CMNshiftLL [c] x y) yes no)
(GT (CMPconst [0] l:(ADDshiftRL [c] x y)) yes no) && l.Uses == 1 => (GTnoov (CMNshiftRL [c] x y) yes no)
(GT (CMPconst [0] l:(ADDshiftRA [c] x y)) yes no) && l.Uses == 1 => (GTnoov (CMNshiftRA [c] x y) yes no)
(GT (CMPconst [0] l:(ADDshiftLLreg x y z)) yes no) && l.Uses == 1 => (GTnoov (CMNshiftLLreg x y z) yes no)
(GT (CMPconst [0] l:(ADDshiftRLreg x y z)) yes no) && l.Uses == 1 => (GTnoov (CMNshiftRLreg x y z) yes no)
(GT (CMPconst [0] l:(ADDshiftRAreg x y z)) yes no) && l.Uses == 1 => (GTnoov (CMNshiftRAreg x y z) yes no)
(GE (CMPconst [0] l:(ADD x y)) yes no) && l.Uses == 1 => (GEnoov (CMN x y) yes no)
(GE (CMPconst [0] l:(MULA x y a)) yes no) && l.Uses == 1 => (GEnoov (CMN a (MUL <x.Type> x y)) yes no)
(GE (CMPconst [0] l:(ADDconst [c] x)) yes no) && l.Uses == 1 => (GEnoov (CMNconst [c] x) yes no)
(GE (CMPconst [0] l:(ADDshiftLL [c] x y)) yes no) && l.Uses == 1 => (GEnoov (CMNshiftLL [c] x y) yes no)
(GE (CMPconst [0] l:(ADDshiftRL [c] x y)) yes no) && l.Uses == 1 => (GEnoov (CMNshiftRL [c] x y) yes no)
(GE (CMPconst [0] l:(ADDshiftRA [c] x y)) yes no) && l.Uses == 1 => (GEnoov (CMNshiftRA [c] x y) yes no)
(GE (CMPconst [0] l:(ADDshiftLLreg x y z)) yes no) && l.Uses == 1 => (GEnoov (CMNshiftLLreg x y z) yes no)
(GE (CMPconst [0] l:(ADDshiftRLreg x y z)) yes no) && l.Uses == 1 => (GEnoov (CMNshiftRLreg x y z) yes no)
(GE (CMPconst [0] l:(ADDshiftRAreg x y z)) yes no) && l.Uses == 1 => (GEnoov (CMNshiftRAreg x y z) yes no)
(GT (CMPconst [0] l:(MULA x y a)) yes no) && l.Uses == 1 => (GTnoov (CMN a (MUL <x.Type> x y)) yes no)
(GT (CMPconst [0] l:(AND x y)) yes no) && l.Uses == 1 => (GTnoov (TST x y) yes no)
(GT (CMPconst [0] l:(ANDconst [c] x)) yes no) && l.Uses == 1 => (GTnoov (TSTconst [c] x) yes no)
(GT (CMPconst [0] l:(ANDshiftLL [c] x y)) yes no) && l.Uses == 1 => (GTnoov (TSTshiftLL [c] x y) yes no)
(GT (CMPconst [0] l:(ANDshiftRL [c] x y)) yes no) && l.Uses == 1 => (GTnoov (TSTshiftRL [c] x y) yes no)
(GT (CMPconst [0] l:(ANDshiftRA [c] x y)) yes no) && l.Uses == 1 => (GTnoov (TSTshiftRA [c] x y) yes no)
(GT (CMPconst [0] l:(ANDshiftLLreg x y z)) yes no) && l.Uses == 1 => (GTnoov (TSTshiftLLreg x y z) yes no)
(GT (CMPconst [0] l:(ANDshiftRLreg x y z)) yes no) && l.Uses == 1 => (GTnoov (TSTshiftRLreg x y z) yes no)
(GT (CMPconst [0] l:(ANDshiftRAreg x y z)) yes no) && l.Uses == 1 => (GTnoov (TSTshiftRAreg x y z) yes no)
(GE (CMPconst [0] l:(AND x y)) yes no) && l.Uses == 1 => (GEnoov (TST x y) yes no)
(GE (CMPconst [0] l:(ANDconst [c] x)) yes no) && l.Uses == 1 => (GEnoov (TSTconst [c] x) yes no)
(GE (CMPconst [0] l:(ANDshiftLL [c] x y)) yes no) && l.Uses == 1 => (GEnoov (TSTshiftLL [c] x y) yes no)
(GE (CMPconst [0] l:(ANDshiftRL [c] x y)) yes no) && l.Uses == 1 => (GEnoov (TSTshiftRL [c] x y) yes no)
(GE (CMPconst [0] l:(ANDshiftRA [c] x y)) yes no) && l.Uses == 1 => (GEnoov (TSTshiftRA [c] x y) yes no)
(GE (CMPconst [0] l:(ANDshiftLLreg x y z)) yes no) && l.Uses == 1 => (GEnoov (TSTshiftLLreg x y z) yes no)
(GE (CMPconst [0] l:(ANDshiftRLreg x y z)) yes no) && l.Uses == 1 => (GEnoov (TSTshiftRLreg x y z) yes no)
(GE (CMPconst [0] l:(ANDshiftRAreg x y z)) yes no) && l.Uses == 1 => (GEnoov (TSTshiftRAreg x y z) yes no)
(GT (CMPconst [0] l:(XOR x y)) yes no) && l.Uses == 1 => (GTnoov (TEQ x y) yes no)
(GT (CMPconst [0] l:(XORconst [c] x)) yes no) && l.Uses == 1 => (GTnoov (TEQconst [c] x) yes no)
(GT (CMPconst [0] l:(XORshiftLL [c] x y)) yes no) && l.Uses == 1 => (GTnoov (TEQshiftLL [c] x y) yes no)
(GT (CMPconst [0] l:(XORshiftRL [c] x y)) yes no) && l.Uses == 1 => (GTnoov (TEQshiftRL [c] x y) yes no)
(GT (CMPconst [0] l:(XORshiftRA [c] x y)) yes no) && l.Uses == 1 => (GTnoov (TEQshiftRA [c] x y) yes no)
(GT (CMPconst [0] l:(XORshiftLLreg x y z)) yes no) && l.Uses == 1 => (GTnoov (TEQshiftLLreg x y z) yes no)
(GT (CMPconst [0] l:(XORshiftRLreg x y z)) yes no) && l.Uses == 1 => (GTnoov (TEQshiftRLreg x y z) yes no)
(GT (CMPconst [0] l:(XORshiftRAreg x y z)) yes no) && l.Uses == 1 => (GTnoov (TEQshiftRAreg x y z) yes no)
(GE (CMPconst [0] l:(XOR x y)) yes no) && l.Uses == 1 => (GEnoov (TEQ x y) yes no)
(GE (CMPconst [0] l:(XORconst [c] x)) yes no) && l.Uses == 1 => (GEnoov (TEQconst [c] x) yes no)
(GE (CMPconst [0] l:(XORshiftLL [c] x y)) yes no) && l.Uses == 1 => (GEnoov (TEQshiftLL [c] x y) yes no)
(GE (CMPconst [0] l:(XORshiftRL [c] x y)) yes no) && l.Uses == 1 => (GEnoov (TEQshiftRL [c] x y) yes no)
(GE (CMPconst [0] l:(XORshiftRA [c] x y)) yes no) && l.Uses == 1 => (GEnoov (TEQshiftRA [c] x y) yes no)
(GE (CMPconst [0] l:(XORshiftLLreg x y z)) yes no) && l.Uses == 1 => (GEnoov (TEQshiftLLreg x y z) yes no)
(GE (CMPconst [0] l:(XORshiftRLreg x y z)) yes no) && l.Uses == 1 => (GEnoov (TEQshiftRLreg x y z) yes no)
(GE (CMPconst [0] l:(XORshiftRAreg x y z)) yes no) && l.Uses == 1 => (GEnoov (TEQshiftRAreg x y z) yes no)
(MOVBUload [off] {sym} (SB) _) && symIsRO(sym) => (MOVWconst [int32(read8(sym, int64(off)))])
(MOVHUload [off] {sym} (SB) _) && symIsRO(sym) => (MOVWconst [int32(read16(sym, int64(off), config.ctxt.Arch.ByteOrder))])
(MOVWload [off] {sym} (SB) _) && symIsRO(sym) => (MOVWconst [int32(read32(sym, int64(off), config.ctxt.Arch.ByteOrder))])
